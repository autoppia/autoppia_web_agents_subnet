[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskPromptForUrl",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa.src.data_generation.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "importPath": "autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa.src.evaluation.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "SelectorType",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa.src.execution.actions.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa.src.web_agents.base",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "importPath": "autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa.src.web_agents.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa.src.web_agents.apified_agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "importPath": "autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa.src.bootstrap",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "importPath": "autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa.src.demo_webs.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "initialize_test_demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "initialize_test_demo_web_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "initialize_demo_webs_projects",
        "importPath": "autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa.src.demo_webs.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "importPath": "autoppia_iwa.src.di_container",
        "description": "autoppia_iwa.src.di_container",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "TestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TestGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "description": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "SubnetVisualizer",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_task",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_evaluation",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_summary",
        "importPath": "autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa.src.shared.visualizator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "importPath": "autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa.src.web_agents.random.agent",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "generate_tasks_for_project",
        "importPath": "autoppia_iwa.src.shared.entrypoints.tasks",
        "description": "autoppia_iwa.src.shared.entrypoints.tasks",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "importPath": "autoppia_iwa.src.shared.entrypoints.metrics",
        "description": "autoppia_iwa.src.shared.entrypoints.metrics",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "importPath": "autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa.src.shared.entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "importPath": "autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa.src.shared.entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "importPath": "autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa.src.shared.entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "importPath": "autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa.src.shared.entrypoints.results",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "importPath": "autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa.src.shared.entrypoints.solutions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exception",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "dependency_injector.wiring",
        "description": "dependency_injector.wiring",
        "isExtraImport": true,
        "detail": "dependency_injector.wiring",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RootModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "RootModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "importPath": "autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa.src.llms.domain.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "get_html_and_screenshot",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "async_extract_html",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa.src.shared.web_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "transform_image_into_base64",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_json_in_markdown",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "importPath": "autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa.src.shared.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "PHASE1_GENERATION_SYSTEM_PROMPT",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckUrlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckPageViewEventTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "importPath": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "TestLogicGenerator",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "description": "autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "importPath": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "importPath": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "LocalTaskGenerationPipeline",
        "importPath": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_STARTING_PORT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "EVALUATOR_HEADLESS",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_CONTEXT_WINDOW",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_PARALLEL_MODEL_ENDPOINT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_HOST",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_PORT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_HOST",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_NAME",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_PORT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "USE_APIFIED_AGENT",
        "importPath": "autoppia_iwa.config.config",
        "description": "autoppia_iwa.config.config",
        "isExtraImport": true,
        "detail": "autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "importPath": "autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa.src.execution.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "RELEVANT_DATA",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "isExtraImport": true,
        "detail": "modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "aiohttp.client_exceptions",
        "description": "aiohttp.client_exceptions",
        "isExtraImport": true,
        "detail": "aiohttp.client_exceptions",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "importPath": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "importPath": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "importPath": "autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa.src.evaluation.interfaces",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "importPath": "autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa.src.execution.browser_executor",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "tiktoken",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tiktoken",
        "description": "tiktoken",
        "detail": "tiktoken",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "Padding",
        "importPath": "rich.padding",
        "description": "rich.padding",
        "isExtraImport": true,
        "detail": "rich.padding",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "rich.layout",
        "description": "rich.layout",
        "isExtraImport": true,
        "detail": "rich.layout",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "rich.align",
        "description": "rich.align",
        "isExtraImport": true,
        "detail": "rich.align",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "description": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AllActionsUnion",
        "importPath": "autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa.src.execution.actions.actions",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebLLMAnalyzer",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "WebPageStructureExtractor",
        "importPath": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "description": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "importPath": "autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa.src.web_analysis.domain.classes",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "importPath": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "importPath": "autoppia_iwa.src.llms.domain.utils",
        "description": "autoppia_iwa.src.llms.domain.utils",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.domain.utils",
        "documentation": {}
    },
    {
        "label": "containers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "providers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "containers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "providers",
        "importPath": "dependency_injector",
        "description": "dependency_injector",
        "isExtraImport": true,
        "detail": "dependency_injector",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LLMFactory",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "importPath": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "CLIPProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CLIPModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "repair_json",
        "importPath": "json_repair",
        "description": "json_repair",
        "isExtraImport": true,
        "detail": "json_repair",
        "documentation": {}
    },
    {
        "label": "repair_json",
        "importPath": "json_repair",
        "description": "json_repair",
        "isExtraImport": true,
        "detail": "json_repair",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "accounts.managers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "isExtraImport": true,
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "events.utils",
        "description": "events.utils",
        "isExtraImport": true,
        "detail": "events.utils",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "EditProfileView",
        "importPath": "jobsapp.views",
        "description": "jobsapp.views",
        "isExtraImport": true,
        "detail": "jobsapp.views",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "EmployeeRegistrationForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployerRegistrationForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeProfileUpdateForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "events.models",
        "description": "events.models",
        "isExtraImport": true,
        "detail": "events.models",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "WhiteNoise",
        "importPath": "whitenoise",
        "description": "whitenoise",
        "isExtraImport": true,
        "detail": "whitenoise",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "jobsapp.reset_seed",
        "description": "jobsapp.reset_seed",
        "isExtraImport": true,
        "detail": "jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "jobsapp.reset_seed",
        "description": "jobsapp.reset_seed",
        "isExtraImport": true,
        "detail": "jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "jobsapp.models",
        "description": "jobsapp.models",
        "isExtraImport": true,
        "detail": "jobsapp.models",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employee",
        "importPath": "jobsapp.decorators",
        "description": "jobsapp.decorators",
        "isExtraImport": true,
        "detail": "jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employer",
        "importPath": "jobsapp.decorators",
        "description": "jobsapp.decorators",
        "isExtraImport": true,
        "detail": "jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "CreateJobForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ApplyJobForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "jobsapp.forms",
        "description": "jobsapp.forms",
        "isExtraImport": true,
        "detail": "jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "events.events",
        "description": "events.events",
        "isExtraImport": true,
        "detail": "events.events",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "sentry_sdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "DjangoIntegration",
        "importPath": "sentry_sdk.integrations.django",
        "description": "sentry_sdk.integrations.django",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.django",
        "documentation": {}
    },
    {
        "label": "LoggingIntegration",
        "importPath": "sentry_sdk.integrations.logging",
        "description": "sentry_sdk.integrations.logging",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.logging",
        "documentation": {}
    },
    {
        "label": "RedisIntegration",
        "importPath": "sentry_sdk.integrations.redis",
        "description": "sentry_sdk.integrations.redis",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.redis",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "pythondjangocrud.apps.users.api.views",
        "description": "pythondjangocrud.apps.users.api.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "importPath": "pythondjangocrud.apps.users.api.views",
        "description": "pythondjangocrud.apps.users.api.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "staticfiles_urlpatterns",
        "importPath": "django.contrib.staticfiles.urls",
        "description": "django.contrib.staticfiles.urls",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles.urls",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "importPath": "config.swagger",
        "description": "config.swagger",
        "isExtraImport": true,
        "detail": "config.swagger",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "pythondjangocrud.apps.attendance.models",
        "description": "pythondjangocrud.apps.attendance.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "importPath": "pythondjangocrud.apps.attendance.models",
        "description": "pythondjangocrud.apps.attendance.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "importPath": "pythondjangocrud.core.admin",
        "description": "pythondjangocrud.core.admin",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "CoreManager",
        "importPath": "pythondjangocrud.core.models",
        "description": "pythondjangocrud.core.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "pythondjangocrud.apps.employee.models",
        "description": "pythondjangocrud.apps.employee.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "AttendanceViewSet",
        "importPath": "pythondjangocrud.apps.attendance.views",
        "description": "pythondjangocrud.apps.attendance.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.views",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "AttendanceSerializer",
        "importPath": "pythondjangocrud.apps.attendance.serializers",
        "description": "pythondjangocrud.apps.attendance.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.attendance.serializers",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "create_event",
        "importPath": "pythondjangocrud.apps.events.utils",
        "description": "pythondjangocrud.apps.events.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "pythondjangocrud.apps.department.models",
        "description": "pythondjangocrud.apps.department.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "pythondjangocrud.apps.department.models",
        "description": "pythondjangocrud.apps.department.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "importPath": "pythondjangocrud.apps.department.views",
        "description": "pythondjangocrud.apps.department.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.views",
        "documentation": {}
    },
    {
        "label": "DepartmentSerializer",
        "importPath": "pythondjangocrud.apps.department.serializers",
        "description": "pythondjangocrud.apps.department.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.department.serializers",
        "documentation": {}
    },
    {
        "label": "EmployeeViewSet",
        "importPath": "pythondjangocrud.apps.employee.views",
        "description": "pythondjangocrud.apps.employee.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.views",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "importPath": "pythondjangocrud.apps.employee.serializers",
        "description": "pythondjangocrud.apps.employee.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.employee.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "pythondjangocrud.apps.users.models",
        "description": "pythondjangocrud.apps.users.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pythondjangocrud.apps.events.models",
        "description": "pythondjangocrud.apps.events.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pythondjangocrud.apps.events.models",
        "description": "pythondjangocrud.apps.events.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "importPath": "pythondjangocrud.apps.payroll.models",
        "description": "pythondjangocrud.apps.payroll.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "importPath": "pythondjangocrud.apps.payroll.models",
        "description": "pythondjangocrud.apps.payroll.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "PayrollViewSet",
        "importPath": "pythondjangocrud.apps.payroll.views",
        "description": "pythondjangocrud.apps.payroll.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.views",
        "documentation": {}
    },
    {
        "label": "PayrollSerializer",
        "importPath": "pythondjangocrud.apps.payroll.serializers",
        "description": "pythondjangocrud.apps.payroll.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.payroll.serializers",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "pythondjangocrud.apps.position.models",
        "description": "pythondjangocrud.apps.position.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "Position",
        "importPath": "pythondjangocrud.apps.position.models",
        "description": "pythondjangocrud.apps.position.models",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "PositionViewSet",
        "importPath": "pythondjangocrud.apps.position.views",
        "description": "pythondjangocrud.apps.position.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.views",
        "documentation": {}
    },
    {
        "label": "PositionSerializer",
        "importPath": "pythondjangocrud.apps.position.serializers",
        "description": "pythondjangocrud.apps.position.serializers",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.position.serializers",
        "documentation": {}
    },
    {
        "label": "ListModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "RetrieveModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "UpdateModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "factory",
        "description": "factory",
        "isExtraImport": true,
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "post_generation",
        "importPath": "factory",
        "description": "factory",
        "isExtraImport": true,
        "detail": "factory",
        "documentation": {}
    },
    {
        "label": "DjangoModelFactory",
        "importPath": "factory.django",
        "description": "factory.django",
        "isExtraImport": true,
        "detail": "factory.django",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "importPath": "pythondjangocrud.apps.users.forms",
        "description": "pythondjangocrud.apps.users.forms",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "MessageMiddleware",
        "importPath": "django.contrib.messages.middleware",
        "description": "django.contrib.messages.middleware",
        "isExtraImport": true,
        "detail": "django.contrib.messages.middleware",
        "documentation": {}
    },
    {
        "label": "SessionMiddleware",
        "importPath": "django.contrib.sessions.middleware",
        "description": "django.contrib.sessions.middleware",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.middleware",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "importPath": "pythondjangocrud.apps.users.tests.factories",
        "description": "pythondjangocrud.apps.users.tests.factories",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "importPath": "pythondjangocrud.apps.users.tests.factories",
        "description": "pythondjangocrud.apps.users.tests.factories",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "UserRedirectView",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_detail_view",
        "importPath": "pythondjangocrud.apps.users.views",
        "description": "pythondjangocrud.apps.users.views",
        "isExtraImport": true,
        "detail": "pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "DefaultSocialAccountAdapter",
        "importPath": "allauth.socialaccount.adapter",
        "description": "allauth.socialaccount.adapter",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.adapter",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.account.forms",
        "description": "allauth.account.forms",
        "isExtraImport": true,
        "detail": "allauth.account.forms",
        "documentation": {}
    },
    {
        "label": "SignupForm",
        "importPath": "allauth.socialaccount.forms",
        "description": "allauth.socialaccount.forms",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.forms",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "django.contrib.sites.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "_simple_domain_name_validator",
        "importPath": "django.contrib.sites.models",
        "description": "django.contrib.sites.models",
        "isExtraImport": true,
        "detail": "django.contrib.sites.models",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "crum",
        "description": "crum",
        "isExtraImport": true,
        "detail": "crum",
        "documentation": {}
    },
    {
        "label": "GenericAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_object_keys",
        "importPath": "pythondjangocrud.core.utils",
        "description": "pythondjangocrud.core.utils",
        "isExtraImport": true,
        "detail": "pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "obtain_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "refresh_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "verify_jwt_token",
        "importPath": "rest_framework_jwt.views",
        "description": "rest_framework_jwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_jwt.views",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "importPath": "backend.pythondjangocrud.apps.events.events",
        "description": "backend.pythondjangocrud.apps.events.events",
        "isExtraImport": true,
        "detail": "backend.pythondjangocrud.apps.events.events",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "test_container",
        "importPath": "tests",
        "description": "tests",
        "isExtraImport": true,
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "test_container",
        "importPath": "tests",
        "description": "tests",
        "isExtraImport": true,
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "test_container",
        "importPath": "tests",
        "description": "tests",
        "isExtraImport": true,
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "test_container",
        "importPath": "tests",
        "description": "tests",
        "isExtraImport": true,
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "test_container",
        "importPath": "tests",
        "description": "tests",
        "isExtraImport": true,
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "TaskPromptGenerator",
        "importPath": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "description": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.task_prompt_generator",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ndarray",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dtype",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "floating",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "complexfloating",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "TaskTestGenerator",
        "importPath": "autoppia_iwa.src.data_generation.application.tests.task_tests_generator",
        "description": "autoppia_iwa.src.data_generation.application.tests.task_tests_generator",
        "isExtraImport": true,
        "detail": "autoppia_iwa.src.data_generation.application.tests.task_tests_generator",
        "documentation": {}
    },
    {
        "label": "bittensor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bittensor",
        "description": "bittensor",
        "detail": "bittensor",
        "documentation": {}
    },
    {
        "label": "Synapse",
        "importPath": "bittensor",
        "description": "bittensor",
        "isExtraImport": true,
        "detail": "bittensor",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "importPath": "autoppia_web_agents_subnet.base.neuron",
        "description": "autoppia_web_agents_subnet.base.neuron",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.neuron",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "importPath": "autoppia_web_agents_subnet.base.neuron",
        "description": "autoppia_web_agents_subnet.base.neuron",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.neuron",
        "documentation": {}
    },
    {
        "label": "add_miner_args",
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "check_config",
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "add_args",
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "add_validator_args",
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "ttl_get_block",
        "importPath": "autoppia_web_agents_subnet.utils.misc",
        "description": "autoppia_web_agents_subnet.utils.misc",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.misc",
        "documentation": {}
    },
    {
        "label": "__spec_version__",
        "importPath": "autoppia_web_agents_subnet",
        "description": "autoppia_web_agents_subnet",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet",
        "documentation": {}
    },
    {
        "label": "process_weights_for_netuid",
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "convert_weights_and_uids_for_emit",
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskFeedbackSynapse",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "MinerStats",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskFeedbackSynapse",
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "get_rewards",
        "importPath": "autoppia_web_agents_subnet.validator.reward",
        "description": "autoppia_web_agents_subnet.validator.reward",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.validator.reward",
        "documentation": {}
    },
    {
        "label": "get_random_uids",
        "importPath": "autoppia_web_agents_subnet.utils.uids",
        "description": "autoppia_web_agents_subnet.utils.uids",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.uids",
        "documentation": {}
    },
    {
        "label": "dendrite_with_retries",
        "importPath": "autoppia_web_agents_subnet.utils.dendrite",
        "description": "autoppia_web_agents_subnet.utils.dendrite",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.dendrite",
        "documentation": {}
    },
    {
        "label": "ColoredLogger",
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "ColoredLogger",
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "ColoredLogger",
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "BaseMinerNeuron",
        "importPath": "autoppia_web_agents_subnet.base.miner",
        "description": "autoppia_web_agents_subnet.base.miner",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.miner",
        "documentation": {}
    },
    {
        "label": "BaseValidatorNeuron",
        "importPath": "autoppia_web_agents_subnet.base.validator",
        "description": "autoppia_web_agents_subnet.base.validator",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.base.validator",
        "documentation": {}
    },
    {
        "label": "forward",
        "importPath": "autoppia_web_agents_subnet.validator",
        "description": "autoppia_web_agents_subnet.validator",
        "isExtraImport": true,
        "detail": "autoppia_web_agents_subnet.validator",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "LLM_PROVIDER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "LLM_PROVIDER = os.getenv(\"LLM_PROVIDER\", \"local\")  # Can be \"serverless\", \"local\", or \"openai\"\nLLM_THRESHOLD = 100\nLLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_THRESHOLD",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "LLM_THRESHOLD = 100\nLLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LLM_CONTEXT_WINDOW",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "LLM_CONTEXT_WINDOW = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 10000))\nLOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_MODEL_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "LOCAL_MODEL_ENDPOINT = os.getenv(\"LOCAL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate\")\nLOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "LOCAL_PARALLEL_MODEL_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "LOCAL_PARALLEL_MODEL_ENDPOINT = os.getenv(\"LOCAL_PARALLEL_MODEL_ENDPOINT\", \"http://127.0.0.1:6000/generate_parallel\")\n# OpenAI Configuration\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nOPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MODEL = os.getenv(\"OPENAI_MODEL\", \"gpt-4-32k-0613\")\nOPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_MAX_TOKENS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_MAX_TOKENS = int(os.getenv(\"LLM_CONTEXT_WINDOW\", 2000))\nOPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "OPENAI_TEMPERATURE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "OPENAI_TEMPERATURE = float(os.getenv(\"OPENAI_TEMPERATURE\", 0.8))\n# Validate critical environment variables\nif LLM_PROVIDER == \"openai\" and not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY is required when LLM_PROVIDER is set to 'openai'.\")\n# ==================================\n# Database and File Configuration\n# ==================================\nMONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_URL = os.getenv(\"MONGODB_URL\")\nMONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "MONGODB_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "MONGODB_NAME = \"workflow\"\nANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "ANALYSIS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "ANALYSIS_COLLECTION = \"web_analysis\"\nTASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "TASKS_COLLECTION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "TASKS_COLLECTION = \"tasks\"\nDOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DOCUMENTS_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "DOCUMENTS_DIR = \"data/web_analysis_files\"\n# ============================\n# Browser and Chrome Paths\n# ============================\nCHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROMEDRIVER_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "CHROMEDRIVER_PATH = os.getenv(\"CHROMEDRIVER_PATH\", \"/opt/chromedriver/chromedriver-linux64/chromedriver\")\nCHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "CHROME_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "CHROME_PATH = os.getenv(\"CHROME_PATH\", \"/opt/chrome/chrome-linux64/chrome\")\nPROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "PROFILE_DIR = os.getenv(\"PROFILE_DIR\", \"~/.config/google-chrome/Profile 6\")\nPROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROFILE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "PROFILE = os.getenv(\"PROFILE\", \"Profile 6\")\n# ============================\n# Application Configuration\n# ============================\nEVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "EVALUATOR_HEADLESS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "EVALUATOR_HEADLESS = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"True\")))\n# ============================\n# Application Configuration\n# ============================\nGENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "GENERATE_MILESTONES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "GENERATE_MILESTONES = bool(strtobool(os.getenv(\"EVALUATOR_HEADLESS\", \"False\")))\n# ============================\n# Project Base Directory Path\n# ============================\nPROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================\n# DEMO WEBS\n# ============================\nDEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "PROJECT_BASE_DIR = Path(__file__).resolve().parents[1]\n# ============================\n# DEMO WEBS\n# ============================\nDEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_ENDPOINT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "DEMO_WEBS_ENDPOINT = os.getenv(\"DEMO_WEBS_ENDPOINT\", \"http://localhost\")\nDEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "DEMO_WEBS_STARTING_PORT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "DEMO_WEBS_STARTING_PORT = int(os.getenv(\"DEMO_WEBS_STARTING_PORT\", '8000'))\n# ============================\n# Agent Configurations\n# ============================\nAGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "AGENT_NAME = os.getenv(\"AGENT_NAME\")\nUSE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "USE_APIFIED_AGENT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "USE_APIFIED_AGENT = bool(strtobool(os.getenv(\"USE_APIFIED_AGENT\", \"false\")))\nAGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_HOST",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "AGENT_HOST = os.getenv(\"AGENT_HOST\", 'localhost')\nAGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "AGENT_PORT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.config.config",
        "description": "autoppia_iwa_module.autoppia_iwa.config.config",
        "peekOfCode": "AGENT_PORT = int(os.getenv(\"AGENT_PORT\", '8080'))",
        "detail": "autoppia_iwa_module.autoppia_iwa.config.config",
        "documentation": {}
    },
    {
        "label": "get_cache_filename",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "def get_cache_filename(project: WebProject) -> str:\n    \"\"\"\n    Genera un nombre de archivo de caché específico para un proyecto.\n    Args:\n        project (WebProject): El proyecto web\n    Returns:\n        str: Ruta al archivo de caché para este proyecto específico\n    \"\"\"\n    # Crear directorio de caché si no existe\n    os.makedirs(TASKS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "def compute_statistics(scores: List[float]) -> dict:\n    \"\"\"\n    Calcula estadísticas básicas para una lista de puntuaciones\n    Args:\n        scores: Lista de puntuaciones\n    Returns:\n        Diccionario con estadísticas calculadas\n    \"\"\"\n    if scores:\n        stats = {",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "def print_performance_statistics(results, agents):\n    \"\"\"\n    Imprime estadísticas de rendimiento para cada agente.\n    Args:\n        results: Diccionario con resultados\n        agents: Lista de agentes evaluados\n    \"\"\"\n    print(\"\\n\" + \"=\" * 50)\n    print(\"ESTADÍSTICAS DE RENDIMIENTO DE AGENTES\")\n    print(\"=\" * 50)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "plot_agent_results",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "def plot_agent_results(results, agents):\n    \"\"\"\n    Crea un gráfico de barras con las puntuaciones promedio de los agentes.\n    Args:\n        results: Diccionario con resultados\n        agents: Lista de agentes evaluados\n    \"\"\"\n    # Asegurar que existe el directorio de resultados\n    os.makedirs(LOG_DIR, exist_ok=True)\n    agent_names = []",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "save_benchmark_results",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "def save_benchmark_results(results, agents, demo_web_projects):\n    \"\"\"\n    Guarda los resultados del benchmark en un archivo JSON para análisis posterior.\n    Args:\n        results: Diccionario con resultados\n        agents: Lista de agentes evaluados\n        demo_web_projects: Lista de proyectos evaluados\n    \"\"\"\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    output_data = {",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "timestamp",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\nOUTPUT_DIR = \"results\"\nLOG_DIR = os.path.join(\"logs\", f\"benchmark_{timestamp}\")\nTASKS_CACHE_DIR = \"data/tasks_cache\"\n# Configuración de caching\nUSE_CACHED_TASKS = False  # Usar tareas cacheadas si están disponibles\n# Configuración del benchmark\nITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "OUTPUT_DIR = \"results\"\nLOG_DIR = os.path.join(\"logs\", f\"benchmark_{timestamp}\")\nTASKS_CACHE_DIR = \"data/tasks_cache\"\n# Configuración de caching\nUSE_CACHED_TASKS = False  # Usar tareas cacheadas si están disponibles\n# Configuración del benchmark\nITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "LOG_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "LOG_DIR = os.path.join(\"logs\", f\"benchmark_{timestamp}\")\nTASKS_CACHE_DIR = \"data/tasks_cache\"\n# Configuración de caching\nUSE_CACHED_TASKS = False  # Usar tareas cacheadas si están disponibles\n# Configuración del benchmark\nITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "TASKS_CACHE_DIR = \"data/tasks_cache\"\n# Configuración de caching\nUSE_CACHED_TASKS = False  # Usar tareas cacheadas si están disponibles\n# Configuración del benchmark\nITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "USE_CACHED_TASKS = False  # Usar tareas cacheadas si están disponibles\n# Configuración del benchmark\nITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "ITERATIONS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "ITERATIONS = 1  # Número de iteraciones por tarea\nNUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Text-External-Agent\", host=\"localhost\", port=9000)\n]",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "NUM_OF_TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "NUM_OF_TASKS = 1\n# Inicializar componentes principales\napp = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Text-External-Agent\", host=\"localhost\", port=9000)\n]\n# ============================================================",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "app = AppBootstrap()\nvisualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Text-External-Agent\", host=\"localhost\", port=9000)\n]\n# ============================================================\n# FUNCIONES DE MANEJO DE TAREAS CACHEADAS\n# ============================================================",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "visualizer",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "peekOfCode": "visualizer = SubnetVisualizer(log_directory=LOG_DIR)\n# Agentes a evaluar\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    # ApifiedWebAgent(name=\"Text-External-Agent\", host=\"localhost\", port=9000)\n]\n# ============================================================\n# FUNCIONES DE MANEJO DE TAREAS CACHEADAS\n# ============================================================\ndef get_cache_filename(project: WebProject) -> str:",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.benchmark",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def compute_statistics(scores: List[float]) -> dict:\n    if scores:\n        return {\n            \"count\": len(scores),\n            \"mean\": statistics.mean(scores),\n            \"median\": statistics.median(scores),\n            \"min\": min(scores),\n            \"max\": max(scores),\n            \"stdev\": statistics.stdev(scores) if len(scores) > 1 else 0.0,\n        }",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def print_performance_statistics(results, agents):\n    print(\"Agent Performance Metrics:\")\n    for agent in agents:\n        agent_stats = results[agent.id]\n        global_stats = compute_statistics(agent_stats[\"global_scores\"])\n        print(f\"\\nAgent: {agent.id}\")\n        print(\"  Global Stats:\")\n        for key, value in global_stats.items():\n            print(f\"    {key}: {value}\")\n        print(\"  Per Project Stats:\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "plot_agent_results",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def plot_agent_results(results, agents):\n    agent_names = []\n    agent_avg_scores = []\n    for agent in agents:\n        scores = results[agent.id][\"global_scores\"]\n        avg_score = sum(scores) / len(scores) if scores else 0\n        agent_names.append(agent.name)\n        agent_avg_scores.append(avg_score)\n    plt.figure(figsize=(8, 6))\n    bars = plt.bar(agent_names, agent_avg_scores, color='skyblue')",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "judge_tasks_feasibility",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "def judge_tasks_feasibility(tasks, results, agents):\n    judge_input = \"Summary of generated tasks and results:\\n\\n\"\n    for idx, task in enumerate(tasks, start=1):\n        judge_input += f\"Task {idx}:\\n\"\n        judge_input += f\"  Prompt: {task.prompt}\\n\"\n        judge_input += f\"  URL: {task.url}\\n\"\n        if task.tests:\n            judge_input += \"  Tests:\\n\"\n            for test in task.tests:\n                judge_input += f\"    - {test.model_dump()}\\n\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "peekOfCode": "app = AppBootstrap()\nasync def generate_tasks(num_tasks: int = 3):\n    test_projects = await initialize_test_demo_web_projects()\n    web_project = test_projects[0]\n    config = TaskGenerationConfig(\n        save_task_in_db=False,\n        save_web_analysis_in_db=True,\n        enable_crawl=True,\n        generate_milestones=False,\n        global_tasks_to_generate=num_tasks,",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.evaluation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "logger = logging.getLogger(\"stress_test\")\n# -----------------------------------------------------------------------------\n# Configuration for the stress test\n# -----------------------------------------------------------------------------\nUSE_CACHED_TASKS = False    # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_TASKS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "USE_CACHED_TASKS = False    # Set to True to use cached tasks from JSON file\nUSE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "USE_CACHED_SOLUTIONS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "USE_CACHED_SOLUTIONS = False  # Set to True to use cached solutions when available\nTASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "TASKS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "TASKS_CACHE_DIR = \"data/tasks_cache\"  # Directory to store task cache files\nSOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "SOLUTIONS_CACHE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "SOLUTIONS_CACHE_DIR = \"data/solutions_cache\"  # Directory to store solution cache files\nOUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "OUTPUT_DIR = \"results\"     # Directory to store test results\nM = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "M = 1   # Number of copies of each solution to evaluate\nPROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "PROMPTS_PER_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "PROMPTS_PER_URL = 1\nNUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "NUM_OF_URLS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "NUM_OF_URLS = 1\n# Create output/cache directories if needed\nos.makedirs(OUTPUT_DIR, exist_ok=True)\nos.makedirs(TASKS_CACHE_DIR, exist_ok=True)\nos.makedirs(SOLUTIONS_CACHE_DIR, exist_ok=True)\n# Initialize the solution cache manager (single file for all solutions)\nsolution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "solution_cache",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "solution_cache = ConsolidatedSolutionCache(SOLUTIONS_CACHE_DIR)\n# -----------------------------------------------------------------------------\n# Define the agents for the stress test\n# -----------------------------------------------------------------------------\nAGENTS: List[BaseAgent] = [\n    RandomClickerWebAgent(name=\"Random-clicker\"),\n    ApifiedWebAgent(name=\"browser-use\", host=\"localhost\", port=9000)\n]\n# Identifier for the browser-use agent\nBROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "BROWSER_USE_AGENT_ID",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "peekOfCode": "BROWSER_USE_AGENT_ID = \"ApifiedWebAgent-browser-use\"\nasync def main():\n    \"\"\"Main function to run the multi-task agent evaluation (stress test).\"\"\"\n    logger.info(\"Starting comprehensive multi-task agent evaluation with batch processing...\")\n    # Initialize the application\n    AppBootstrap()\n    # Initialize timing metrics\n    timing_metrics = TimingMetrics()\n    timing_metrics.start()\n    # Container to store results: { agent_id: { task_id: {\"score\": ...} } }",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.stress",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = AppBootstrap()\nasync def main():\n    try:\n        # Create a WebProject (with its web analysis populated)\n        demo_web_projects: List[WebProject] = await initialize_demo_webs_projects()\n        web_project: WebProject = demo_web_projects[0]\n        # Create TaskGenerationConfig if needed by TaskGenerationPipeline\n        config = TaskGenerationConfig(\n            save_task_in_db=False,",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "description": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "peekOfCode": "app = AppBootstrap()\nasync def main():\n    try:\n        # Create a WebProject (with its web analysis populated)\n        demo_web_projects: List[WebProject] = await initialize_demo_webs_projects()\n        web_project: WebProject = demo_web_projects[0]\n        # Create TaskGenerationConfig if needed by TaskGenerationPipeline\n        config = TaskGenerationConfig(\n            save_task_in_db=False,\n            save_web_analysis_in_db=False,",
        "detail": "autoppia_iwa_module.autoppia_iwa.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "LocalTaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "peekOfCode": "class LocalTaskGenerationPipeline:\n    def __init__(self, web_project: WebProject, llm_service: \"ILLM\" = Provide[DIContainer.llm_service]):\n        self.web_project: WebProject = web_project\n        self.llm_service: ILLM = llm_service\n        self.max_retries: int = 3  # Maximum number of retries for LLM calls\n        self.retry_delay: float = 0.1  # Delay between retries in seconds\n    async def generate(self, page_url: str) -> List[\"Task\"]:\n        # Fetch the HTML and screenshot\n        html, clean_html, screenshot, screenshot_desc = await get_html_and_screenshot(page_url)\n        interactive_elems = detect_interactive_elements(clean_html)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LocalTaskGenerationPipeline:\n    def __init__(self, web_project: WebProject, llm_service: \"ILLM\" = Provide[DIContainer.llm_service]):\n        self.web_project: WebProject = web_project\n        self.llm_service: ILLM = llm_service\n        self.max_retries: int = 3  # Maximum number of retries for LLM calls\n        self.retry_delay: float = 0.1  # Delay between retries in seconds\n    async def generate(self, page_url: str) -> List[\"Task\"]:\n        # Fetch the HTML and screenshot\n        html, clean_html, screenshot, screenshot_desc = await get_html_and_screenshot(page_url)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.local_task_generation",
        "documentation": {}
    },
    {
        "label": "LOCAL_TASKS_CONTEXT_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "LOCAL_TASKS_CONTEXT_PROMPT = \"\"\"\nContext: \nYou are responsible for generating, refining, and validating single-page user tasks for a website through a structured, multi-phase process. This process is inspired by advanced autonomous evaluation frameworks like Infinite Web Arena (IWA) and consists of the following phases:\n1. Draft Generation\n   - **What:** Create initial task drafts using generative AI techniques to simulate realistic user interactions (e.g., navigation, search, filtering, and transactions) on a single-page interface.\n   - **Why:** To generate a diverse set of scenarios that challenge web agents by mimicking dynamic, real-world website behaviors.\n   - **How:** Leverage meta-programming and LLMs to produce a broad range of tasks that cover both common and edge-case interactions.\n2. Feasibility & Success Criteria Filtering\n   - **What:** Evaluate each task draft against predefined feasibility metrics and success criteria.\n   - **Why:** To ensure that every task is executable within a real browser environment and that success can be objectively measured through both frontend (DOM analysis, network monitoring, visual verification) and backend (event tracking, state validation) tests.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "PHASE1_GENERATION_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "PHASE1_GENERATION_SYSTEM_PROMPT = \"\"\"\nYou are a Task Example Generator that creates realistic examples of tasks a Web Agent could perform on websites.\nStart by identifying the type of task and the core use case that a user may want to do in this website. \nIdentify variations of that core use case. \nIf needed fill remaining task with simpler tasks like clicking, navigating, or using more structural items and elements. \nDIFFICULTY LEVEL: HARD (Create specially hard and not obvious tasks)\n**Input Provided**:\n- Website URL\n- Clean HTML snippet \n- Screenshot description (text-based UI representation)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "PHASE2_FEASIBILITY_FILTER_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "PHASE2_FEASIBILITY_FILTER_PROMPT = \"\"\"\nWe are in Phase 2: Feasibility Filter.\nRemove tasks referencing elements that definitely do not exist \nin 'clean_html' or the 'interactive_elements'.\nIf a task might be referencing something that partially matches \n(e.g., a form with name 'search_form' vs 'searchForm'), keep it.\n#Output format:\nReturn JSON:\n[\n  {\"prompt\": \"...\",\"success_criteria\": \"...\",\"decision\":\"keep\" or \"remove\",\"reason\":\"...\"},",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "PHASE2_SUCCESS_CRITERIA_FILTER_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "PHASE2_SUCCESS_CRITERIA_FILTER_PROMPT = \"\"\"\nWe Are in Phase 2: Success Criteria Filtering. \nRemove tasks with vague or missing success criteria.\nSuccess Criterial should be enough to verify if the Web Agent who will be in charge of completing this charge has actually completed it. \nSo it cant be abstract or subjective. \n#Output format:\nReturn JSON:\n[\n  {\"prompt\": \"...\",\"success_criteria\": \"...\",\"decision\":\"keep\" or \"remove\"},\n  ...",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "PHASE2_CONCEPT_FILTER_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "peekOfCode": "PHASE2_CONCEPT_FILTER_PROMPT = \"\"\"\nWe Are in Phase 2: Contextual and concept Filtering\nYou need to Remove off-topic, dev-oriented task, task unrelated to what the website is about tasks. \nFor example, if the task is about buying a product but we are in Wikipedia.com its unrelated and should be removed.\n#Output format:\nReturn JSON:\n[\n  {\"prompt\": \"...\",\"success_criteria\": \"...\",\"decision\":\"keep\" or \"remove\"},\n  ...\n]",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.prompts",
        "documentation": {}
    },
    {
        "label": "DraftTask",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class DraftTask(BaseModel):\n    \"\"\"Schema for the output of Phase 1 draft tasks.\"\"\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "DraftTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class DraftTaskList(RootModel[List[DraftTask]]):\n    \"\"\"A container for a list of draft tasks.\"\"\"\n    # Access items via self.root (a List[DraftTask])\nclass FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTask",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class FilterTask(BaseModel):\n    \"\"\"Schema for the output of Phase 2 filter tasks.\"\"\"\n    decision: str  # \"keep\" or \"discard\"\n    prompt: str\n    success_criteria: Optional[str] = None\nclass FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "FilterTaskList",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "peekOfCode": "class FilterTaskList(RootModel[List[FilterTask]]):\n    \"\"\"A container for a list of filtered tasks.\"\"\"\n    # Access items via self.root (a List[FilterTask])",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks.local.schemas",
        "documentation": {}
    },
    {
        "label": "TestLogicGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "peekOfCode": "class TestLogicGenerator:\n    \"\"\"\n    Generates executable logic expressions for test evaluation.\n    Uses a structured JSON format that can be directly translated to executable code.\n    \"\"\"\n    def __init__(self, llm_service: ILLM = Provide[DIContainer.llm_service]):\n        self.llm_service = llm_service\n    async def generate_logic(\n        self,\n        task: Task,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.logic_function_generator",
        "documentation": {}
    },
    {
        "label": "LOGIC_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.prompts",
        "peekOfCode": "LOGIC_SYSTEM_PROMPT = \"\"\"\n    You are an expert at creating precise, executable logic expressions for test evaluation.\n    Given a matrix M where:\n    - Rows (i) represent steps/actions (1 to N)\n    - Columns (j) represent tests (1 to M)\n    - M[i][j] is True if test j passes at step i\n    Generate a logic expression in the following JSON format:\n    {\n        \"type\": \"operation\",\n        \"operator\": \"<operator>\",  # AND, OR, SEQUENCE, EXISTS, ALL",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.logic.prompts",
        "documentation": {}
    },
    {
        "label": "TEST_GENERATION_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.prompts",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.prompts",
        "peekOfCode": "TEST_GENERATION_PROMPT = \"\"\"\nYou are a specialized test engineer tasked with generating validation tests for our web agent benchmark framework. These tests will execute after each agent action, examining browser snapshots to determine if the agent has successfully completed the required task.\n## Task Information\n- Task Description: {task_prompt}\n- Success Requirements: {success_criteria}\n## Context\n- Current Page URL: {current_url}\n- Current Page HTML (truncated): {truncated_html}\n- Visual State Description: {screenshot_desc}\n- Available Interactive Elements: {interactive_elements}",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.prompts",
        "documentation": {}
    },
    {
        "label": "TestEvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.schemas",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.schemas",
        "peekOfCode": "class TestEvaluationResult(BaseModel):\n    \"\"\"\n    Model for LLM response when evaluating a specific test type for a task\n    \"\"\"\n    applicable: bool = Field(\n        ..., \n        description=\"Whether this test type is applicable for the task\"\n    )\n    reason: str = Field(\n        ..., ",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.schemas",
        "documentation": {}
    },
    {
        "label": "TestGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "peekOfCode": "class TestGenerationPipeline:\n    \"\"\" A pipeline that: \n    1) Gathers context (HTML, screenshot info, etc.) for each Task. \n    2) Uses LLM to generate appropriate tests in a single call.\n    3) Instantiates the test objects and adds them to the task. \n    4) (Optionally) generates a logic function for the entire set of tests. \"\"\"\n    def __init__(\n        self,\n        web_project: WebProject,\n        llm_service: ILLM = Provide[DIContainer.llm_service],",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.test_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "normalize_test_config",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "peekOfCode": "def normalize_test_config(test_config: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"\n    Converts LLM-produced test_config (with nested 'fields') into a flattened structure.\n    \"\"\"\n    # Get the original test type\n    raw_test_type = test_config.get(\"test_type\")\n    # Flatten the 'fields' dictionary into the main dictionary\n    if \"fields\" in test_config and isinstance(test_config[\"fields\"], dict):\n        fields = test_config.pop(\"fields\")\n        test_config.update(fields)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "documentation": {}
    },
    {
        "label": "extract_domain",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "peekOfCode": "def extract_domain(url: str) -> str:\n    \"\"\"Extract domain from a full URL.\"\"\"\n    if not url:\n        return \"\"\n    pattern = re.compile(r\"https?://([^/]+)\")\n    match = pattern.match(url)\n    return match.group(1).lower() if match else \"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tests.utils",
        "documentation": {}
    },
    {
        "label": "TaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "peekOfCode": "class TaskGenerationPipeline:\n    def __init__(\n        self,\n        web_project: WebProject,\n        config: TaskGenerationConfig,\n        synthetic_task_repository: BaseMongoRepository = Provide[DIContainer.synthetic_task_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service]\n    ):\n        self.web_project: WebProject = web_project\n        self.task_config: TaskGenerationConfig = config",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.application.tasks_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskDifficultyLevel",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskDifficultyLevel(Enum):\n    EASY = \"easy\"\n    MEDIUM = \"medium\"\n    HARD = \"hard\"\nclass TaskPromptForUrl(BaseModel):\n    page_url: str = Field(..., description=\"URL of the page where the task is to be performed\")\n    task_prompts: List[str] = Field(..., description=\"List of task prompts for the given URL\")\nclass BrowserSpecification(BaseModel):\n    viewport_width: int = Field(1920, description=\"Width of the viewport in pixels\")\n    viewport_height: int = Field(1080, description=\"Height of the viewport in pixels\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskPromptForUrl",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskPromptForUrl(BaseModel):\n    page_url: str = Field(..., description=\"URL of the page where the task is to be performed\")\n    task_prompts: List[str] = Field(..., description=\"List of task prompts for the given URL\")\nclass BrowserSpecification(BaseModel):\n    viewport_width: int = Field(1920, description=\"Width of the viewport in pixels\")\n    viewport_height: int = Field(1080, description=\"Height of the viewport in pixels\")\n    screen_width: int = Field(1920, description=\"Total width of the physical screen in pixels\")\n    screen_height: int = Field(1080, description=\"Total height of the physical screen in pixels\")\n    device_pixel_ratio: float = Field(1.0, description=\"Ratio of physical pixels to CSS pixels\")\n    scroll_x: int = Field(0, description=\"Horizontal scroll offset in pixels\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "BrowserSpecification",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class BrowserSpecification(BaseModel):\n    viewport_width: int = Field(1920, description=\"Width of the viewport in pixels\")\n    viewport_height: int = Field(1080, description=\"Height of the viewport in pixels\")\n    screen_width: int = Field(1920, description=\"Total width of the physical screen in pixels\")\n    screen_height: int = Field(1080, description=\"Total height of the physical screen in pixels\")\n    device_pixel_ratio: float = Field(1.0, description=\"Ratio of physical pixels to CSS pixels\")\n    scroll_x: int = Field(0, description=\"Horizontal scroll offset in pixels\")\n    scroll_y: int = Field(0, description=\"Vertical scroll offset in pixels\")\n    browser_x: int = Field(0, description=\"X position of the browser window on the screen\")\n    browser_y: int = Field(0, description=\"Y position of the browser window on the screen\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class Task(BaseModel):\n    \"\"\"\n    Represents a task with associated metadata, specifications, and success criteria.\n    This model captures all necessary information for task execution and validation,\n    including browser specifications, test cases, and milestone subtasks.\n    \"\"\"\n    id: str = Field(\n        default_factory=lambda: str(uuid.uuid4()),\n        description=\"Unique identifier for the task, auto-generated using UUID4\"\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TaskGenerationConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TaskGenerationConfig(BaseModel):\n    save_task_in_db: bool = False\n    save_web_analysis_in_db: bool = True\n    enable_crawl: bool = True\n    generate_milestones: bool = False\n    num_or_urls:int = None\n    random_urls:bool = True\n    prompts_per_url:int = 20\n    num_or_urls:int = None\nclass TasksGenerationOutput(BaseModel):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "TasksGenerationOutput",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "peekOfCode": "class TasksGenerationOutput(BaseModel):\n    tasks: List[Task] = Field(..., description=\"List of generated tasks\")\n    total_phase_time: float = Field(..., description=\"Total time taken for the task generation phase\")\n    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat(), description=\"Timestamp of task generation\")\n    def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"tasks\": [task.model_dump() for task in self.tasks],\n            \"total_phase_time\": self.total_phase_time,\n            \"timestamp\": self.timestamp,\n        }",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.classes",
        "documentation": {}
    },
    {
        "label": "ITest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class ITest(ABC):\n    @abstractmethod\n    def _execute_test(\n        self,\n        current_iteration: int,\n        prompt:str,\n        snapshot: BrowserSnapshot,\n        browser_snapshots: List[BrowserSnapshot]\n    ) -> bool:\n        \"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "BaseTaskTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class BaseTaskTest(BaseModel, ITest):\n    \"\"\"\n    Base class for all task tests.\n    \"\"\"\n    class Config:\n        arbitrary_types_allowed = True\n    def execute_test(\n        self,\n        current_iteration: int,\n        prompt: str,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckUrlTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckUrlTest(BaseTaskTest):\n    \"\"\"\n    Test class to verify the current browser URL matches a specified target URL.\n    \"\"\"\n    type: str = \"CheckUrlTest\"\n    url: str\n    description: str = Field(\n        default=\"Check URL\",\n        description=\"Description of the test\",\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "FindInHtmlTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class FindInHtmlTest(BaseTaskTest):\n    \"\"\"\n    Test class to find a specific substring in the current HTML content.\n    This version performs direct substring matching rather than semantic similarity.\n    \"\"\"\n    type: str = \"FindInHtmlTest\"\n    substring: str = Field(..., description=\"substring to look for in the HTML\")\n    description: str = Field(\n        default=\"Find substring in HTML using direct matching\",\n        description=\"Description of the test\",",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckEventTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckEventTest(BaseTaskTest):\n    \"\"\"\n    Test class to verify if a specific backend event was emitted.\n    \"\"\"\n    type: str = \"CheckEventTest\"\n    event_name: str = Field(..., description=\"Name of the expected backend event\")\n    description: str = Field(\n        default=\"Check event\",\n        description=\"Description of the test\",\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "CheckPageViewEventTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class CheckPageViewEventTest(BaseTaskTest):\n    \"\"\"\n    Test class to verify if a specific page view event was logged in the backend.\n    \"\"\"\n    type: str = \"CheckPageViewEventTest\"\n    page_view_url: str = Field(..., description=\"The URL expected to trigger a page view event\")\n    description: str = Field(\n        default=\"Check page view event\",\n        description=\"Description of the test\",\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnHTML",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class JudgeBaseOnHTML(BaseTaskTest):\n    \"\"\"\n    Test class to generate an opinion based on changes in HTML before and after an action.\n    \"\"\"\n    type: str = \"JudgeBaseOnHTML\"\n    success_criteria: str = Field(..., description=\"What should the LLM look for to verify success of the task.\")\n    description: str = Field(\n        default=\"Judge based on HTML changes\",\n        description=\"Description of the test\",\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "JudgeBaseOnScreenshot",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "peekOfCode": "class JudgeBaseOnScreenshot(BaseTaskTest):\n    \"\"\"\n    Test class to generate an opinion based on screenshots before and after an action.\n    \"\"\"\n    type: str = \"JudgeBaseOnScreenshot\"\n    success_criteria: str = Field(..., description=\"What should the LLM look for to verify success of the task.\")\n    description: str = Field(\n        default=\"Judge based on screenshot changes\",\n        description=\"Description of the test\",\n    )",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.data_generation.domain.tests_classes",
        "documentation": {}
    },
    {
        "label": "WebProject",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "peekOfCode": "class WebProject(BaseModel):\n    id: str = Field(..., description=\"Unique identifier of the web project\")\n    name: str = Field(..., min_length=1, description=\"Name of the web project\")\n    backend_url: str = Field(..., description=\"URL of the backend server\")\n    frontend_url: str = Field(..., description=\"URL of the frontend application\")\n    is_web_real: bool = False\n    domain_analysis:Optional[DomainAnalysis] = None\n    events: List[str] = Field(default_factory=list, description=\"List of events to monitor\")\n    urls:List[str] = []\n    relevant_data: Dict[str, Any] = Field(default_factory=dict, description=\"Structured additional information about the web project\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "BackendEvent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "peekOfCode": "class BackendEvent(BaseModel):\n    \"\"\"\n    Represents a validated event payload with application-specific constraints.\n    Enforces proper event-application relationships and provides rich metadata.\n    \"\"\"\n    event_type: str\n    description: str\n    data: Optional[Dict[str, Any]] = None\n    user_id: Optional[int] = None\n    created_at: datetime = datetime.now()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.classes",
        "documentation": {}
    },
    {
        "label": "get_frontend_url",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "peekOfCode": "def get_frontend_url(index):\n    return f\"{DEMO_WEBS_ENDPOINT}:{str(8000 + index) + '/'}\"\ndef get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index) + '/'}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index + 1) + '/'}\"\ndemo_web_projects = [\n    WebProject(\n        id=\"jobs\",",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "get_backend_url",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "peekOfCode": "def get_backend_url(index: int, symetric=True):\n    if symetric:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index) + '/'}\"\n    else:\n        return f\"{DEMO_WEBS_ENDPOINT}:{str(DEMO_WEBS_STARTING_PORT + index + 1) + '/'}\"\ndemo_web_projects = [\n    WebProject(\n        id=\"jobs\",\n        name=\"Jobs Demo Website\",\n        frontend_url=get_frontend_url(index=0),",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "demo_web_projects",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "peekOfCode": "demo_web_projects = [\n    WebProject(\n        id=\"jobs\",\n        name=\"Jobs Demo Website\",\n        frontend_url=get_frontend_url(index=0),\n        backend_url=get_backend_url(index=0),\n        events=events_allowed_web_1,\n        relevant_data=relevant_data_web_1,\n    )\n    # ),",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.config",
        "documentation": {}
    },
    {
        "label": "BackendDemoWebService",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "peekOfCode": "class BackendDemoWebService:\n    \"\"\"\n    Service for interacting with the backend of demo web endpoints.\n    Stores the web_project on initialization and uses its backend_url for API calls.\n    \"\"\"\n    def __init__(self, web_project:WebProject) -> None:\n        \"\"\"\n        Initialize a single aiohttp session holder and store the web_project.\n        Args:\n            web_project: The web project containing the backend_url to use",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BackendDemoWebService:\n    \"\"\"\n    Service for interacting with the backend of demo web endpoints.\n    Stores the web_project on initialization and uses its backend_url for API calls.\n    \"\"\"\n    def __init__(self, web_project:WebProject) -> None:\n        \"\"\"\n        Initialize a single aiohttp session holder and store the web_project.\n        Args:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.demo_webs.demo_webs_service",
        "documentation": {}
    },
    {
        "label": "EvaluationStats",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class EvaluationStats(BaseModel):\n    \"\"\"Statistics for a single evaluation\"\"\"\n    web_agent_id: str\n    task_id: str\n    action_count: int\n    action_types: Dict[str, int] = Field(default_factory=dict)\n    # Timing stats\n    start_time: float\n    total_time: float = 0\n    browser_setup_time: float = 0",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class EvaluationResult(BaseEvaluationResult):\n    web_agent_id: Optional[str] = None\n    raw_score: float = 0.0\n    random_clicker_score: float = 0.0\n    random_passed_tests: List[int] = Field(default_factory=list)\n    evaluation_time: float = 0.0  # Time taken to evaluate this solution\n    stats: Optional[EvaluationStats] = None\nclass EvaluatorConfig(BaseModel):\n    save_results_in_db: bool = False\n    task_delay_in_seconds: float = Field(default=0.1, gt=0)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "EvaluatorConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class EvaluatorConfig(BaseModel):\n    save_results_in_db: bool = False\n    task_delay_in_seconds: float = Field(default=0.1, gt=0)\n    chunk_size: int = Field(default=20, gt=0)\n    browser_timeout: float = Field(default=10000, gt=0)\n    event_monitor_interval: float = Field(default=0.1, gt=0, le=0.5)\n    enable_grouping_tasks: bool = Field(default=True)\n    exclude_random_passed_tests: bool = Field(default=True)\n    cache_random_clicker_results: bool = Field(default=True)\n    normalize_scores: bool = Field(default=True)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "ConcurrentEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "peekOfCode": "class ConcurrentEvaluator(IEvaluator):\n    def __init__(self, web_project, config: EvaluatorConfig):\n        self.config = config\n        self._random_clicker_cache: Dict[str, Tuple[List[int], float]] = {}\n        self.total_evaluation_time = 0.0\n        self.evaluation_count = 0\n        self.web_project = web_project\n        self.backend_demo_webs_service = BackendDemoWebService(web_project=web_project)\n        # Statistics collection\n        self.evaluation_stats = []  # List of completed evaluation stats",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.evaluator",
        "documentation": {}
    },
    {
        "label": "FeedbackGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "peekOfCode": "class FeedbackGenerator:\n    @staticmethod\n    def calculate_score(success_count: int, total_count: int, scale: int = 10) -> float:\n        \"\"\"Calculate a score based on the ratio of successes to the total count.\"\"\"\n        return (success_count / total_count) * scale if total_count > 0 else 0\n    @staticmethod\n    def calculate_time_penalty(total_execution_time: float, expected_time: float) -> float:\n        \"\"\"\n        Calculate the time penalty based on the extra execution time.\n        For every 5 extra seconds beyond the expected time, 0.5 points are subtracted.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.feedback_generator",
        "documentation": {}
    },
    {
        "label": "TestRunner",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "peekOfCode": "class TestRunner:\n    def __init__(self, tests: List[BaseTaskTest]):\n        self.tests = tests\n    def run_tests(self, prompt: str, snapshot: BrowserSnapshot, browser_snapshots: List[BrowserSnapshot], current_action_index: int) -> List[TestResult]:\n        \"\"\"\n        Run all tests for a single snapshot (after a single action).\n        Args:\n            prompt: The task prompt\n            snapshot: The current browser snapshot\n            browser_snapshots: All browser snapshots up to the current one",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.evaluator.test_runner",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class TestResult(BaseModel):\n    \"\"\"Represents the evaluation result of a single test.\"\"\"\n    success: bool  # True if the test passed, False otherwise\n    extra_data: Optional[dict] = None  # Additional data related to the test\nclass Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions\n    failed_actions: int  # Number of failed actions\n    passed_tests: int  # Number of tests that passed",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class Feedback(BaseModel):\n    task_prompt: str  # The description of the task being evaluated\n    final_score: float  # Overall evaluation score (0-10)\n    executed_actions: int  # Number of successfully executed actions\n    failed_actions: int  # Number of failed actions\n    passed_tests: int  # Number of tests that passed\n    failed_tests: int  # Number of tests that failed\n    total_execution_time: float  # Total time taken for execution\n    time_penalty: float  # Penalty points for exceeding expected time\n    critical_test_penalty: int  # Penalty points for failing critical tests",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "EvaluationResult",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "peekOfCode": "class EvaluationResult(BaseModel):\n    \"\"\"Encapsulates the output of a task evaluation.\"\"\"\n    final_score: float = 0\n    test_results_matrix: List[List[TestResult]]  # List of test evaluation results\n    execution_history: List[ActionExecutionResult]  # History of all actions executed\n    feedback: Optional[Feedback] = None  # Feedback generated during the evaluation\n    def model_dump(self, *args, **kwargs):\n        base_dump = super().model_dump(*args, **kwargs)\n        base_dump[\"execution_history\"] = [action.model_dump() for action in self.execution_history]\n        # Remove unwanted keys from feedback",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.classes",
        "documentation": {}
    },
    {
        "label": "IEvaluator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.evaluation.interfaces",
        "description": "autoppia_iwa_module.autoppia_iwa.src.evaluation.interfaces",
        "peekOfCode": "class IEvaluator(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    @abstractmethod\n    async def evaluate_single_task_solution(self, task: Task, task_solution: TaskSolution) -> EvaluationResult:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.evaluation.interfaces",
        "documentation": {}
    },
    {
        "label": "ClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ClickAction(BaseActionWithSelector):\n    type: Literal[\"ClickAction\"] = \"ClickAction\"\n    x: Optional[int] = None\n    y: Optional[int] = None\n    @log_action(\"ClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.selector:\n            selector_str = self.validate_selector()\n            await page.click(selector_str)\n        elif self.x is not None and self.y is not None:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DoubleClickAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DoubleClickAction(BaseActionWithSelector):\n    type: Literal[\"DoubleClickAction\"] = \"DoubleClickAction\"\n    @log_action(\"DoubleClickAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        selector_str = self.validate_selector()\n        await page.dblclick(selector_str)\nclass NavigateAction(BaseAction):\n    type: Literal[\"NavigateAction\"] = \"NavigateAction\"\n    url: Optional[str] = \"\"\n    go_back: bool = False",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "NavigateAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class NavigateAction(BaseAction):\n    type: Literal[\"NavigateAction\"] = \"NavigateAction\"\n    url: Optional[str] = \"\"\n    go_back: bool = False\n    go_forward: bool = False\n    @log_action(\"NavigateAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.go_back:\n            await page.go_back()\n        elif self.go_forward:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "TypeAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class TypeAction(BaseActionWithSelector):\n    type: Literal[\"TypeAction\"] = \"TypeAction\"\n    text: str\n    @log_action(\"TypeAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.fill(sel_str, self.text)\nclass SelectAction(BaseActionWithSelector):\n    type: Literal[\"SelectAction\"] = \"SelectAction\"\n    value: str",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectAction(BaseActionWithSelector):\n    type: Literal[\"SelectAction\"] = \"SelectAction\"\n    value: str\n    @log_action(\"SelectAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.select_option(sel_str, self.value)\nclass HoverAction(BaseActionWithSelector):\n    type: Literal[\"HoverAction\"] = \"HoverAction\"\n    @log_action(\"HoverAction\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "HoverAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class HoverAction(BaseActionWithSelector):\n    type: Literal[\"HoverAction\"] = \"HoverAction\"\n    @log_action(\"HoverAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.hover(sel_str)\nclass WaitAction(BaseActionWithSelector):\n    type: Literal[\"WaitAction\"] = \"WaitAction\"\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "WaitAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class WaitAction(BaseActionWithSelector):\n    type: Literal[\"WaitAction\"] = \"WaitAction\"\n    time_seconds: Optional[float] = None\n    @log_action(\"WaitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.selector:\n            sel_str = self.validate_selector()\n            await page.wait_for_selector(sel_str, timeout=self.time_seconds * 1000 if self.time_seconds else None)\n        elif self.time_seconds:\n            await page.wait_for_timeout(self.time_seconds * 1000)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScrollAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScrollAction(BaseAction):\n    type: Literal[\"ScrollAction\"] = \"ScrollAction\"\n    value: Optional[Union[str, int]] = None\n    up: bool = False\n    down: bool = False\n    @log_action(\"ScrollAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        if self.up:\n            try:\n                await page.evaluate(f\"window.scrollBy(0, -{self.value});\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SubmitAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SubmitAction(BaseActionWithSelector):\n    type: Literal[\"SubmitAction\"] = \"SubmitAction\"\n    @log_action(\"SubmitAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        sel_str = self.validate_selector()\n        await page.locator(sel_str).press(\"Enter\")\nclass AssertAction(BaseAction):\n    type: Literal[\"AssertAction\"] = \"AssertAction\"\n    text_to_assert: str\n    @log_action(\"AssertAction\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AssertAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class AssertAction(BaseAction):\n    type: Literal[\"AssertAction\"] = \"AssertAction\"\n    text_to_assert: str\n    @log_action(\"AssertAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        content = await page.content()\n        if self.text_to_assert not in content:\n            raise AssertionError(f\"'{self.text_to_assert}' not found in page source.\")\nclass DragAndDropAction(BaseAction):\n    type: Literal[\"DragAndDropAction\"] = \"DragAndDropAction\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "DragAndDropAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class DragAndDropAction(BaseAction):\n    type: Literal[\"DragAndDropAction\"] = \"DragAndDropAction\"\n    source_selector: str = Field(..., alias=\"sourceSelector\")\n    target_selector: str = Field(..., alias=\"targetSelector\")\n    @log_action(\"DragAndDropAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.drag_and_drop(self.source_selector, self.target_selector)\nclass ScreenshotAction(BaseAction):\n    type: Literal[\"ScreenshotAction\"] = \"ScreenshotAction\"\n    file_path: str",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ScreenshotAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class ScreenshotAction(BaseAction):\n    type: Literal[\"ScreenshotAction\"] = \"ScreenshotAction\"\n    file_path: str\n    @log_action(\"ScreenshotAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.screenshot(path=self.file_path)\nclass SendKeysIWAAction(BaseAction):\n    type: Literal[\"SendKeysIWAAction\"] = \"SendKeysIWAAction\"\n    keys: str\n    @log_action(\"SendKeysIWAAction\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SendKeysIWAAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SendKeysIWAAction(BaseAction):\n    type: Literal[\"SendKeysIWAAction\"] = \"SendKeysIWAAction\"\n    keys: str\n    @log_action(\"SendKeysIWAAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        await page.keyboard.press(self.keys)\nclass GetDropDownOptions(BaseActionWithSelector):\n    type: Literal[\"GetDropDownOptions\"] = \"GetDropDownOptions\"\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "GetDropDownOptions",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class GetDropDownOptions(BaseActionWithSelector):\n    type: Literal[\"GetDropDownOptions\"] = \"GetDropDownOptions\"\n    @log_action(\"GetDropDownOptions\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        xpath = self.validate_selector()\n        all_options = []\n        frame_index = 0\n        for frame in page.frames:\n            try:\n                options = await frame.evaluate(",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectDropDownOption",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class SelectDropDownOption(BaseActionWithSelector):\n    type: Literal[\"SelectDropDownOption\"] = \"SelectDropDownOption\"\n    text: str\n    @log_action(\"SelectDropDownOption\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        xpath = self.validate_selector()\n        frame_index = 0\n        found = False\n        for frame in page.frames:\n            try:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "UndefinedAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class UndefinedAction(BaseAction):\n    type: Literal[\"UndefinedAction\"] = \"UndefinedAction\"\n    @log_action(\"UndefinedAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass\nclass IdleAction(BaseAction):\n    type: Literal[\"IdleAction\"] = \"IdleAction\"\n    @log_action(\"IdleAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "IdleAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "class IdleAction(BaseAction):\n    type: Literal[\"IdleAction\"] = \"IdleAction\"\n    @log_action(\"IdleAction\")\n    async def execute(self, page: Optional[Page], backend_service, web_agent_id: str):\n        pass\n# -------------------------------------------------------------------\n# Union Type to Handle All Actions by Discriminator\n# -------------------------------------------------------------------\nAllActionsUnion = Annotated[\n    Union[",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "log_action",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "def log_action(action_name: str):\n    \"\"\"Decorator to log action execution around the `execute` call.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(self, page: Optional[Page], backend_service, web_agent_id: str):\n            action_logger.debug(f\"Executing {action_name} with data: {self.model_dump()}\")\n            try:\n                return await func(self, page, backend_service, web_agent_id)\n            except Exception as e:\n                # error_details = traceback.format_exc()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "action_logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "action_logger = logger.bind(action=\"autoppia_action\")\nlogger.disable(\"autoppia_action\")  # Disable logging for agent actions execution as its so annoying\ndef log_action(action_name: str):\n    \"\"\"Decorator to log action execution around the `execute` call.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(self, page: Optional[Page], backend_service, web_agent_id: str):\n            action_logger.debug(f\"Executing {action_name} with data: {self.model_dump()}\")\n            try:\n                return await func(self, page, backend_service, web_agent_id)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "AllActionsUnion",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "AllActionsUnion = Annotated[\n    Union[\n        ClickAction,\n        DoubleClickAction,\n        NavigateAction,\n        TypeAction,\n        SelectAction,\n        HoverAction,\n        WaitAction,\n        ScrollAction,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP_LOWER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP_LOWER = {\n    \"click\": ClickAction,\n    \"type\": TypeAction,\n    \"hover\": HoverAction,\n    \"navigate\": NavigateAction,\n    \"dragAndDrop\": DragAndDropAction,\n    \"submit\": SubmitAction,\n    \"doubleClick\": DoubleClickAction,\n    \"scroll\": ScrollAction,\n    \"screenshot\": ScreenshotAction,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP_CAPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP_CAPS = {\n    \"ClickAction\": ClickAction,\n    \"TypeAction\": TypeAction,\n    \"HoverAction\": HoverAction,\n    \"NavigateAction\": NavigateAction,\n    \"DragAndDropAction\": DragAndDropAction,\n    \"SubmitAction\": SubmitAction,\n    \"DoubleClickAction\": DoubleClickAction,\n    \"ScrollAction\": ScrollAction,\n    \"ScreenshotAction\": ScreenshotAction,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "ACTION_CLASS_MAP",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "peekOfCode": "ACTION_CLASS_MAP = {**ACTION_CLASS_MAP_CAPS, **ACTION_CLASS_MAP_LOWER}",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.actions",
        "documentation": {}
    },
    {
        "label": "SelectorType",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class SelectorType(str, Enum):\n    ATTRIBUTE_VALUE_SELECTOR = \"attributeValueSelector\"\n    TAG_CONTAINS_SELECTOR = \"tagContainsSelector\"\n    XPATH_SELECTOR = \"xpathSelector\"\nclass Selector(BaseModel):\n    type: SelectorType\n    attribute: Optional[str] = None\n    value: str\n    case_sensitive: bool = False\n    def to_playwright_selector(self) -> str:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "Selector",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class Selector(BaseModel):\n    type: SelectorType\n    attribute: Optional[str] = None\n    value: str\n    case_sensitive: bool = False\n    def to_playwright_selector(self) -> str:\n        \"\"\"\n        Returns the final selector string for use with Playwright.\n        \"\"\"\n        ATTRIBUTE_FORMATS = {",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "ActionRegistry",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class ActionRegistry:\n    \"\"\"Registry to store and retrieve action subclasses.\"\"\"\n    _registry: Dict[str, Type[\"BaseAction\"]] = {}\n    @classmethod\n    def register(cls, action_type: str, action_class: Type[\"BaseAction\"]):\n        \"\"\"Register an action class with a simplified key.\"\"\"\n        # Register with a lowercase version of action_type without \"Action\"\n        action_key = action_type.replace(\"Action\", \"\").lower()\n        cls._registry[action_key] = action_class\n    @classmethod",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseAction",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseAction(BaseModel):\n    \"\"\"\n    Base for all actions with a discriminating 'type' field.\n    \"\"\"\n    type: str = Field(..., description=\"Discriminated action type\")\n    class Config:\n        extra = \"allow\"\n    def __init_subclass__(cls, **kwargs):\n        \"\"\"Automatically register subclasses in the ActionRegistry.\"\"\"\n        super().__init_subclass__(**kwargs)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "BaseActionWithSelector",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "class BaseActionWithSelector(BaseAction):\n    selector: Optional[Selector] = None\n    def validate_selector(self) -> str:\n        if not self.selector:\n            raise ValueError(\"Selector is required for this action.\")\n        return self.selector.to_playwright_selector()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ------------------------------------------------------\n# SELECTOR LOGIC\n# ------------------------------------------------------\nclass SelectorType(str, Enum):\n    ATTRIBUTE_VALUE_SELECTOR = \"attributeValueSelector\"\n    TAG_CONTAINS_SELECTOR = \"tagContainsSelector\"\n    XPATH_SELECTOR = \"xpathSelector\"\nclass Selector(BaseModel):\n    type: SelectorType",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.actions.base",
        "documentation": {}
    },
    {
        "label": "PlaywrightBrowserExecutor",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.browser_executor",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.browser_executor",
        "peekOfCode": "class PlaywrightBrowserExecutor:\n    def __init__(self, browser_config: BrowserSpecification, page: Optional[Page] = None, backend_demo_webs_service: BackendDemoWebService = None):\n        \"\"\"\n        Initializes the PlaywrightBrowserExecutor with a backend service and an optional Playwright page.\n        Args:\n            backend_demo_webs_service: Service for interacting with the backend.\n            page: Optional Playwright page object.\n        \"\"\"\n        self.browser_config = browser_config\n        self.page: Optional[Page] = page",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.browser_executor",
        "documentation": {}
    },
    {
        "label": "BrowserSnapshot",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "peekOfCode": "class BrowserSnapshot(BaseModel):\n    \"\"\"\n    Represents a snapshot of the browser state before and after executing an action.\n    Captures HTML content, screenshots, backend events, and metadata.\n    \"\"\"\n    iteration: int = Field(..., description=\"The current iteration of the evaluation process\")\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    prev_html: str = Field(..., description=\"HTML content before actions were executed\")\n    current_html: str = Field(..., description=\"HTML content after actions were executed\")\n    screenshot_before: str = Field(..., description=\"Base64-encoded screenshot before actions\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "ActionExecutionResult",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "peekOfCode": "class ActionExecutionResult(BaseModel):\n    \"\"\"Log of the execution result of an action.\"\"\"\n    action: BaseAction = Field(..., description=\"The action that was executed\")\n    action_event: str = Field(..., description=\"Type of the action event (e.g., 'click', 'navigate', 'type')\")\n    successfully_executed: bool = Field(..., description=\"Indicates whether the action was executed successfully\")\n    error: Optional[str] = Field(None, description=\"Details of the error if the action failed\")\n    execution_time: Optional[float] = Field(None, description=\"Time taken to execute the action, in seconds\")\n    browser_snapshot: BrowserSnapshot = Field(..., description=\"Snapshot of the browser state after execution\")\n    def model_dump(self, *args, **kwargs):\n        base_dump = super().model_dump(*args, **kwargs)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.execution.classes",
        "documentation": {}
    },
    {
        "label": "LLMConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class LLMConfig:\n    \"\"\"Basic configuration for LLMs.\"\"\"\n    model: str = \"gpt-3.5-turbo\"\n    temperature: float = 0.7\n    max_tokens: int = 2048\nclass ILLM(ABC):\n    \"\"\"Minimal interface for LLM models with two methods.\"\"\"\n    @abstractmethod\n    def predict(\n        self,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "ILLM",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "peekOfCode": "class ILLM(ABC):\n    \"\"\"Minimal interface for LLM models with two methods.\"\"\"\n    @abstractmethod\n    def predict(\n        self,\n        messages: List[Dict[str, str]],\n        json_format: bool = False,\n        schema: Optional[Dict] = None\n    ) -> str:\n        \"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.interfaces",
        "documentation": {}
    },
    {
        "label": "OpenAIUtilsMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.utils",
        "peekOfCode": "class OpenAIUtilsMixin:\n    @staticmethod\n    def num_tokens_from_string(string: str, model=\"gpt-3.5-turbo-0613\", disallowed_special=True) -> int:\n        \"\"\"Returns the number of tokens in a text string.\"\"\"\n        encoding = tiktoken.encoding_for_model(model)\n        if disallowed_special:\n            num_tokens = len(encoding.encode(string, disallowed_special=()))\n        else:\n            num_tokens = len(encoding.encode(string))\n        return num_tokens",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.domain.utils",
        "documentation": {}
    },
    {
        "label": "OpenAIService",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class OpenAIService(ILLM):\n    \"\"\"\n    Simple OpenAI-based LLM.\n    Uses OpenAI (sync) and AsyncOpenAI (async) clients.\n    \"\"\"\n    def __init__(self, config: LLMConfig, api_key: str):\n        self.config = config\n        self.sync_client = OpenAI(api_key=api_key)\n        self.async_client = AsyncOpenAI(api_key=api_key)\n    def _prepare_json_schema(self, schema: Dict) -> Dict:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LocalLLMService",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class LocalLLMService(ILLM):\n    \"\"\"\n    Simple local (self-hosted) LLM that communicates via HTTP.\n    Uses HTTPX for sync and async calls.\n    \"\"\"\n    def __init__(\n        self,\n        config: LLMConfig,\n        endpoint_url: str,\n        parallel_endpoint_url: Optional[str] = None",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "LLMFactory",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "peekOfCode": "class LLMFactory:\n    \"\"\"\n    Simple factory to build the right LLM implementation\n    based on the llm_type.\n    \"\"\"\n    @staticmethod\n    def create_llm(\n        llm_type: str,\n        config: LLMConfig,\n        **kwargs",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.llm_service",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "description": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "peekOfCode": "class UIParserService:\n    def __init__(self):\n        pass\n    def summarize_image(self, file):\n        return \"\"\n# class UIParserService:\n#     def __init__(self):\n#         pass\n#         device = 0 if torch.cuda.is_available() else -1\n#         self.ui_parser = pipeline(\"image-to-text\", model=\"microsoft/OmniParser-v2.0\", device=device)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.llms.infrastructure.ui_parser_service",
        "documentation": {}
    },
    {
        "label": "TimingMetrics",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "peekOfCode": "class TimingMetrics:\n    \"\"\"Track timing metrics for tasks and agents.\"\"\"\n    def __init__(self):\n        self.start_time = None\n        self.end_time = None\n        # Structure: {agent_id: {task_id: float}} for solution & evaluation times\n        self.solution_times: Dict[str, Dict[str, float]] = {}\n        self.evaluation_times: Dict[str, Dict[str, float]] = {}\n    def start(self):\n        \"\"\"Start the overall timing.\"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "compute_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "peekOfCode": "def compute_statistics(values: List[float]) -> dict:\n    \"\"\"\n    Compute basic statistics for a list of numeric values.\n    Returns:\n        dict: A dictionary with count, mean, median, min, max, stdev.\n    \"\"\"\n    if not values:\n        return {\n            \"count\": 0,\n            \"mean\": None,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.metrics",
        "documentation": {}
    },
    {
        "label": "save_results_to_json",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "peekOfCode": "def save_results_to_json(results, agents, timing_metrics: TimingMetrics, output_dir: str) -> str:\n    \"\"\"\n    Save comprehensive results to a JSON file and return the file path.\n    \"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = os.path.join(output_dir, f\"stress_test_results_{timestamp}.json\")\n    output_data = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"total_execution_time\": timing_metrics.get_total_time(),",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "print_performance_statistics",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "peekOfCode": "def print_performance_statistics(results, agents, timing_metrics: TimingMetrics):\n    \"\"\"\n    Print performance stats (scores, timings) for each agent.\n    \"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"\\n===== PERFORMANCE REPORT ({timestamp}) =====\")\n    total_time = timing_metrics.get_total_time()\n    print(f\"\\nTotal test execution time: {total_time:.2f} seconds\")\n    for agent in agents:\n        print(f\"\\n== Agent: {agent.name} ({agent.id}) ==\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_results",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "peekOfCode": "def plot_results(results, agents, timing_metrics: TimingMetrics, output_dir: str) -> str:\n    \"\"\"\n    Plot average score, solution time, and evaluation time for each agent.\n    Returns the path to the saved plot image.\n    \"\"\"\n    import statistics\n    os.makedirs(output_dir, exist_ok=True)\n    agent_names = [agent.name for agent in agents]\n    agent_ids = [agent.id for agent in agents]\n    avg_scores = []",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "plot_task_comparison",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "peekOfCode": "def plot_task_comparison(results, agents, tasks, output_dir: str) -> str:\n    \"\"\"\n    Plot each agent's score on each task (up to 10 tasks).\n    Returns the path to the saved plot image.\n    \"\"\"\n    import numpy as np\n    os.makedirs(output_dir, exist_ok=True)\n    max_tasks_to_show = min(10, len(tasks))\n    selected_tasks = tasks[:max_tasks_to_show]\n    fig, ax = plt.subplots(figsize=(12, 6))",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.results",
        "documentation": {}
    },
    {
        "label": "SolutionData",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "peekOfCode": "class SolutionData(BaseModel):\n    \"\"\"Model for caching solution data\"\"\"\n    agent_id: str\n    agent_name: str\n    timestamp: float = Field(default_factory=time.time)\n    solution: TaskSolution\nclass TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}\n    def __getitem__(self, key):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "TaskCache",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "peekOfCode": "class TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}\n    def __getitem__(self, key):\n        return self.root[key]\n    def __setitem__(self, key, value):\n        self.root[key] = value\n    def __contains__(self, key):\n        return key in self.root\n    def keys(self):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "SolutionsCache",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "peekOfCode": "class SolutionsCache(RootModel):\n    \"\"\"Model for the entire solutions cache\"\"\"\n    root: Dict[str, TaskCache] = {}\n    def __getitem__(self, key):\n        return self.root[key]\n    def __setitem__(self, key, value):\n        self.root[key] = value\n    def __contains__(self, key):\n        return key in self.root\n    def keys(self):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "ConsolidatedSolutionCache",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "peekOfCode": "class ConsolidatedSolutionCache:\n    \"\"\"\n    Class to handle caching of task solutions in a single JSON file.\n    Uses Pydantic models for data validation and serialization.\n    \"\"\"\n    def __init__(self, cache_dir: str):\n        \"\"\"\n        Initialize the solution cache.\n        Args:\n            cache_dir: Directory where solution cache file will be stored",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SolutionData(BaseModel):\n    \"\"\"Model for caching solution data\"\"\"\n    agent_id: str\n    agent_name: str\n    timestamp: float = Field(default_factory=time.time)\n    solution: TaskSolution\nclass TaskCache(RootModel):\n    \"\"\"Model for task cache entries\"\"\"\n    root: Dict[str, SolutionData] = {}",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.solutions",
        "documentation": {}
    },
    {
        "label": "get_cache_filename",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.tasks",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.tasks",
        "peekOfCode": "def get_cache_filename(project: WebProject, task_cache_dir: str) -> str:\n    \"\"\"\n    Generate a project-specific cache filename based on the project's name or ID.\n    \"\"\"\n    safe_name = project.name.replace(\" \", \"_\").lower()\n    return os.path.join(task_cache_dir, f\"{safe_name}_tasks.json\")\nasync def save_tasks_to_json(tasks: List[Task], project: WebProject, task_cache_dir: str) -> bool:\n    \"\"\"\n    Save tasks to a project-specific JSON file.\n    \"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.entrypoints.tasks",
        "documentation": {}
    },
    {
        "label": "BaseMongoRepository",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "peekOfCode": "class BaseMongoRepository:\n    \"\"\"\n    A generic repository for performing CRUD operations on a MongoDB collection.\n    \"\"\"\n    def __init__(self, mongo_client: MongoClient, db_name: str, collection_name: str):\n        \"\"\"\n        Initialize the BaseMongoRepository.\n        Args:\n            mongo_client (MongoClient): The MongoDB client.\n            db_name (str): The name of the database.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.infrastructure.databases.base_mongo_repository",
        "documentation": {}
    },
    {
        "label": "print_task_screenshot_in_terminal",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "peekOfCode": "def print_task_screenshot_in_terminal(task, width=80):\n    \"\"\"\n    Prints a Task's screenshot image in the terminal as simple ASCII art.\n    Args:\n        task (Task): The task containing a base64 encoded screenshot\n        width (int): Width of the ASCII art in characters. Defaults to 80.\n    Returns:\n        bool: True if successful, False if there was an error.\n    \"\"\"\n    if not task.screenshot:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "documentation": {}
    },
    {
        "label": "simple_ascii_art",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "peekOfCode": "def simple_ascii_art(image, width=80):\n    \"\"\"Convert and print image as ASCII art with no terminal operations\"\"\"\n    try:\n        # Hard-coded safe width\n        width = min(width, 100)\n        # Calculate height with aspect ratio, with safety bounds\n        aspect_ratio = image.height / max(1, image.width)\n        height = max(1, int(width * aspect_ratio * 0.5))\n        # Resize and convert to grayscale safely\n        try:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.image_utils",
        "documentation": {}
    },
    {
        "label": "PromptImporter",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.prompt_importer",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.prompt_importer",
        "peekOfCode": "class PromptImporter:\n    \"\"\"\n    Loads a prompt from a specified file path.\n    \"\"\"\n    def __init__(self, prompt_file_path: str):\n        self.prompt_file_path = prompt_file_path\n        self._prompt_content = self._load_prompt()\n    def _load_prompt(self) -> str:\n        if not os.path.exists(self.prompt_file_path):\n            raise FileNotFoundError(f\"Prompt file not found: {self.prompt_file_path}\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.prompt_importer",
        "documentation": {}
    },
    {
        "label": "generate_random_web_agent_id",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def generate_random_web_agent_id(length: int = 16) -> str:\n    \"\"\"\n    Generates a random alphanumeric string for the web_agent ID.\n    \"\"\"\n    letters_and_digits = string.ascii_letters + string.digits\n    return \"\".join(random.choice(letters_and_digits) for _ in range(length))\ndef extract_json_in_markdown(text: str) -> str:\n    \"\"\"\n    Extract the first fenced code block (```json ... ``` or just ``` ... ```).\n    If none is found, return text.strip() as a fallback.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "extract_json_in_markdown",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def extract_json_in_markdown(text: str) -> str:\n    \"\"\"\n    Extract the first fenced code block (```json ... ``` or just ``` ... ```).\n    If none is found, return text.strip() as a fallback.\n    \"\"\"\n    pattern = re.compile(r\"```(?:json)?\\s*(.*?)\\s*```\", re.DOTALL)\n    match = pattern.search(text)\n    if match:\n        return match.group(1).strip()\n    return text.strip()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "transform_image_into_base64",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "peekOfCode": "def transform_image_into_base64(image: Image.Image) -> str:\n    \"\"\"\n    Converts a PIL Image into a base64 encoded string.\n    Args:\n        image (Image.Image): The image to be converted.\n    Returns:\n        str: The base64 encoded string of the image.\n    \"\"\"\n    buffered = BytesIO()\n    image.save(buffered, format=\"PNG\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.utils",
        "documentation": {}
    },
    {
        "label": "SubnetVisualizer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "class SubnetVisualizer:\n    \"\"\"\n    Visualizador mejorado para Subnet 36 que muestra:\n    1. Tarea con su prompt\n    2. Tests asociados con información detallada\n    3. Acciones del agente\n    4. Resultados de tests (✅/❌)\n    5. Puntuaciones\n    \"\"\"\n    def __init__(self, log_directory: Optional[str] = None):",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_task",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_task(visualizer):\n    \"\"\"Decorator para visualizar una tarea y sus tests\"\"\"\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            result = await func(*args, **kwargs)\n            if isinstance(result, list):\n                for task in result:\n                    visualizer.show_task_with_tests(task)\n            else:\n                visualizer.show_task_with_tests(result)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_evaluation",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_evaluation(visualizer):\n    \"\"\"Decorator para visualizar la evaluación de un agente\"\"\"\n    def decorator(func):\n        async def wrapper(web_project, task, task_solution, *args, **kwargs):\n            result = await func(web_project, task, task_solution, *args, **kwargs)\n            visualizer.show_agent_evaluation(\n                agent_id=task_solution.web_agent_id,\n                task=task,\n                actions=task_solution.actions,\n                test_results_matrix=result.test_results_matrix if hasattr(result, \"test_results_matrix\") else [],",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "visualize_summary",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "peekOfCode": "def visualize_summary(visualizer):\n    \"\"\"Decorator para visualizar el resumen final\"\"\"\n    def decorator(func):\n        def wrapper(results, agents, *args, **kwargs):\n            func(results, agents, *args, **kwargs)\n            visualizer.print_summary(results, agents)\n            return None\n        return wrapper\n    return decorator",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.visualizator",
        "documentation": {}
    },
    {
        "label": "sync_extract_html",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def sync_extract_html(page_url: str) -> str:\n    \"\"\"\n    Uses Playwright in sync mode to extract HTML from a page.\n    Adjust if your environment doesn't support sync Playwright.\n    \"\"\"\n    from playwright.sync_api import sync_playwright\n    launch_options = {\"headless\": True, \"args\": [\"--start-maximized\"]}\n    with sync_playwright() as p:\n        browser_type = p.chromium\n        browser = browser_type.launch(**launch_options)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "clean_html",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def clean_html(html_content: str) -> str:\n    \"\"\"\n    Removes scripts, styles, hidden tags, inline event handlers, etc.,\n    returning a 'clean' version of the DOM.\n    This version is exception resistant.\n    \"\"\"\n    try:\n        soup = BeautifulSoup(html_content, \"html.parser\")\n    except Exception:\n        return \"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "detect_interactive_elements",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "peekOfCode": "def detect_interactive_elements(cleaned_html: str) -> Dict[str, Any]:\n    \"\"\"\n    Inspects the cleaned HTML to find possible interactive elements:\n      - forms (with their inputs)\n      - buttons or anchors with text\n      - textareas, selects, etc.\n    Returns a dict summarizing them for LLM usage, e.g.:\n    {\n      \"forms\": [\n        {\"fields\": [\"name\", \"email\", \"message\"]}",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.shared.web_utils",
        "documentation": {}
    },
    {
        "label": "MyCustomApifiedWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "peekOfCode": "class MyCustomApifiedWebAgent(ApifiedWebAgent):\n    def __init__(self, name: str, host: str, port: int):\n        super().__init__(name, host, port)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.custom_apified_agent.agent",
        "documentation": {}
    },
    {
        "label": "RandomClickerWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.random.agent",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.random.agent",
        "peekOfCode": "class RandomClickerWebAgent(BaseAgent):\n    \"\"\"\n    Web Agent that executes random actions within the screen dimensions.\n    \"\"\"\n    def __init__(self, name=\"Random clicker\", is_random:bool = True):\n        super().__init__(name=name)\n        self.is_random = is_random\n    async def solve_task(self, task: Task) -> TaskSolution:\n        \"\"\"\n        Generates a list of random click actions within the screen dimensions.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.random.agent",
        "documentation": {}
    },
    {
        "label": "ApifiedWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.apified_agent",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.apified_agent",
        "peekOfCode": "class ApifiedWebAgent(IWebAgent):\n    \"\"\"\n    Calls a remote /solve_task endpoint and rebuilds a TaskSolution.\n    \"\"\"\n    def __init__(self, host: str, port: int, id: str | None = None, name: str | None = None, timeout=120):\n        self.id = id or generate_random_web_agent_id()\n        self.name = name or f\"Agent {self.id}\"\n        self.base_url = f\"http://{host}:{port}\"\n        self.timeout = timeout\n        super().__init__()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.apified_agent",
        "documentation": {}
    },
    {
        "label": "IWebAgent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class IWebAgent(ABC):\n    \"\"\"\n    The design allows for multiple web agents to implement this interface, ensuring standardized inputs and behaviors across different agents.\n    Every web agent that implements this interface must define the required methods and properties, ensuring consistency and compatibility.\n    Example:\n    - An 'Autopilot Web Agent' would implement this interface, adhering to the standardized inputs and outputs specified here.\n    The goal is to provide a common structure that all web agents will follow, facilitating integration and interoperability among them.\n    \"\"\"\n    id: str\n    name: str",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "peekOfCode": "class BaseAgent(IWebAgent):\n    def __init__(self, name=None):\n        self.id = self.generate_random_web_agent_id()\n        self.name = name if name is not None else f\"Agent {self.id}\"\n    def generate_random_web_agent_id(self, length=16):\n        \"\"\"Generates a random alphanumeric string for the web_agent ID.\"\"\"\n        letters_and_digits = string.ascii_letters + string.digits\n        return ''.join(random.choice(letters_and_digits) for _ in range(length))",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.base",
        "documentation": {}
    },
    {
        "label": "TaskSolution",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_agents.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_agents.classes",
        "peekOfCode": "class TaskSolution(BaseModel):\n    task_id: str = Field(\n        default_factory=lambda: str(uuid.uuid4()),\n        description=\"Unique identifier for the task, auto-generated using UUID4\"\n    )\n    actions: List[BaseAction] = Field(default_factory=list)\n    web_agent_id: Optional[str] = None\n    def nested_model_dump(self, *args, **kwargs) -> str:\n        base_dump = super().model_dump(*args, **kwargs)\n        base_dump[\"actions\"] = [action.model_dump() for action in self.actions]",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_agents.classes",
        "documentation": {}
    },
    {
        "label": "WebAnalysisPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "class WebAnalysisPipeline:\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url\n        self.domain = urlparse(start_url).netloc\n        self.llm_service = llm_service",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "MAX_TOKENS_ELEMENT_ANALYZER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "peekOfCode": "MAX_TOKENS_ELEMENT_ANALYZER = LLM_CONTEXT_WINDOW\nclass WebAnalysisPipeline:\n    def __init__(\n        self,\n        start_url: str,\n        analysis_repository: BaseMongoRepository = Provide[DIContainer.analysis_repository],\n        llm_service: ILLM = Provide[DIContainer.llm_service],\n    ):\n        self.start_url = start_url\n        self.domain = urlparse(start_url).netloc",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_analysis_pipeline",
        "documentation": {}
    },
    {
        "label": "WebCrawler",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_crawler",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_crawler",
        "peekOfCode": "class WebCrawler:\n    \"\"\"\n    A web crawler that crawls URLs starting from a given start URL.\n    Args:\n        start_url (str): The URL to start crawling from.\n    Attributes:\n        domain (str): The domain of the start URL.\n    \"\"\"\n    def __init__(self, crawler_config: WebCrawlerConfig):\n        parsed = urlparse(crawler_config.start_url)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_crawler",
        "documentation": {}
    },
    {
        "label": "WebLLMAnalyzer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "class WebLLMAnalyzer:\n    def __init__(self, llm_service: ILLM = Provide[DIContainer.llm_service]):\n        \"\"\"\n        Initialize the web page structure extractor with a start URL.\n        Args:\n            llm_service (ILLM): the model to extract data from.\n        \"\"\"\n        self.llm_service: ILLM = llm_service\n    def analyze_element(self, element: Element) -> LLMWebAnalysis:\n        template = PromptLLMTemplate.get_instance_from_file(",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "CONVERT_RESPONSE_TO_JSON_PROMPT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "peekOfCode": "CONVERT_RESPONSE_TO_JSON_PROMPT = \"\"\"\nYou are an expert JSON content reviewer tasked with analyzing the given RAW JSON/Unstructured\n segment of a webpage and providing a strictly valid JSON-formatted analysis.\nImportant Requirements:\n- Return only one JSON object (no arrays, no multiple objects).\n- The output must be valid JSON that can be directly parsed by `json.loads` without modification.\n- Use double quotes for all keys and string values.\n- Do not include trailing commas.\n- Do not include any text or explanation outside of the JSON object.\n- If something is not relevant, omit it entirely rather than returning empty lists or objects.",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_llm_utils",
        "documentation": {}
    },
    {
        "label": "WebPageStructureExtractor",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "peekOfCode": "class WebPageStructureExtractor:\n    \"\"\"\n    A web page structure extractor that extracts structured data from web pages.\n    \"\"\"\n    ALLOWED_HTML_TAGS = [\n        \"header\",\n        \"nav\",\n        \"main\",\n        \"section\",\n        \"article\",",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.application.web_page_structure_extractor",
        "documentation": {}
    },
    {
        "label": "LLMWebAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class LLMWebAnalysis(BaseModel):\n    one_phrase_summary: str\n    summary: str\n    categories: List[str]\n    functionality: List[str]\n    media_files_description: Optional[Union[str, List[Dict[str, Any]], List[str]]] = None\n    key_words: List[str]\n    relevant_fields: Optional[List[Union[str, Dict[str, Union[str, Any]]]]] = None\n    curiosities: Optional[str] = None\n    accessibility: Optional[Union[str, List[str]]] = None",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "SinglePageAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class SinglePageAnalysis(BaseModel):\n    page_url: str\n    elements_analysis_result: List[Dict]\n    web_summary: LLMWebAnalysis\n    html_source: str\nclass DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    page_analyses: List[SinglePageAnalysis]\n    started_time: str",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "DomainAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "peekOfCode": "class DomainAnalysis(BaseModel):\n    domain: str\n    status: str\n    page_analyses: List[SinglePageAnalysis]\n    started_time: str\n    ended_time: str\n    total_time: float\n    start_url: str\n    category:str = \"\"\n    features:List[str] = Field(default_factory=list, description=\"List of features\")",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.analysis_classes",
        "documentation": {}
    },
    {
        "label": "EventTriggered",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class EventTriggered:\n    type: str\n    def to_dict(self):\n        field_names = [f.name for f in fields(self)]\n        d = {k: getattr(self, k) for k in field_names}\n        return d\n@dataclass\nclass Element:\n    tag: str\n    attributes: Dict[str, str]",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class Element:\n    tag: str\n    attributes: Dict[str, str]\n    textContent: str\n    children: List[\"Element\"] = field(default_factory=list)\n    id: Optional[str] = None\n    element_id: Optional[int] = None\n    parent_element_id: Optional[int] = None\n    path: Optional[str] = None\n    events_triggered: List[EventTriggered] = field(default_factory=list)",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "WebCrawlerConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "peekOfCode": "class WebCrawlerConfig(BaseModel):\n    start_url: str\n    max_depth: int = 2",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.classes",
        "documentation": {}
    },
    {
        "label": "PromptLLMTemplate",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "peekOfCode": "class PromptLLMTemplate:\n    def __init__(self, template: str, variables: list = None, values: dict = None, schema: dict = None):\n        \"\"\"\n        Initializes the PromptLLMTemplate.\n        Args:\n            template (str): The text template containing variables in the format ${variable}.\n            variables (list): Optional list of variables present in the template.\n            values (dict): Optional dictionary of values to replace the variables.\n            schema (dict): Optional JSON schema for validation of values.\n        \"\"\"",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_analysis.domain.prompt_llm_template",
        "documentation": {}
    },
    {
        "label": "TaskData",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "peekOfCode": "class TaskData(BaseModel):\n    \"\"\"Data model for tasks.\"\"\"\n    id: str\n    web: str\n    ques: str\n    web_name: str\ndef setup_logging() -> None:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(format=\"[%(levelname)s]: %(message)s\", level=logging.INFO, handlers=[logging.StreamHandler()])\ndef load_jsonl_file(file_path: Path) -> List[Dict]:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "peekOfCode": "def setup_logging() -> None:\n    \"\"\"Set up logging configuration.\"\"\"\n    logging.basicConfig(format=\"[%(levelname)s]: %(message)s\", level=logging.INFO, handlers=[logging.StreamHandler()])\ndef load_jsonl_file(file_path: Path) -> List[Dict]:\n    \"\"\"Load tasks from a JSONL file.\"\"\"\n    if not file_path.exists():\n        logging.warning(f\"File {file_path} not found.\")\n        return []\n    tasks = []\n    with file_path.open(\"r\", encoding=\"utf-8\") as f:",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "documentation": {}
    },
    {
        "label": "load_jsonl_file",
        "kind": 2,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "description": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "peekOfCode": "def load_jsonl_file(file_path: Path) -> List[Dict]:\n    \"\"\"Load tasks from a JSONL file.\"\"\"\n    if not file_path.exists():\n        logging.warning(f\"File {file_path} not found.\")\n        return []\n    tasks = []\n    with file_path.open(\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            try:\n                tasks.append(json.loads(line))",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.web_voyager_test.utils",
        "documentation": {}
    },
    {
        "label": "AppBootstrap",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.bootstrap",
        "description": "autoppia_iwa_module.autoppia_iwa.src.bootstrap",
        "peekOfCode": "class AppBootstrap:\n    \"\"\"\n    In charge of initializing Dependency Injection\n    \"\"\"\n    def __init__(self):\n        self.configure_dependency_injection()\n    def configure_dependency_injection(self):\n        self.container = DIContainer()",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.bootstrap",
        "documentation": {}
    },
    {
        "label": "DIContainer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.autoppia_iwa.src.di_container",
        "description": "autoppia_iwa_module.autoppia_iwa.src.di_container",
        "peekOfCode": "class DIContainer(containers.DeclarativeContainer):\n    \"\"\"Dependency Injection Container.\"\"\"\n    # Configuration\n    config = providers.Configuration()\n    wiring_config = containers.WiringConfiguration(packages=[\"autoppia_iwa.src\"])\n    # Initialize MongoDB client as Singleton\n    mongo_client = providers.Singleton(lambda: MongoClient(MONGODB_URL))\n    # Repository of analysis results as Factory\n    analysis_repository = providers.Factory(\n        BaseMongoRepository,",
        "detail": "autoppia_iwa_module.autoppia_iwa.src.di_container",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.test.test_one_request",
        "description": "autoppia_iwa_module.modules.llm_local.test.test_one_request",
        "peekOfCode": "def make_request():\n    url = \"http://127.0.0.1:6000/generate\"\n    headers = {\"Content-Type\": \"application/json\"}\n    # Instead of putting everything under \"input\": {...},\n    # we send messages/temperature/max_tokens at the top level.\n    data = {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\"",
        "detail": "autoppia_iwa_module.modules.llm_local.test.test_one_request",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "description": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "peekOfCode": "def make_request():\n    url = \"http://127.0.0.1:6000/generate\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\"\n            },\n            {",
        "detail": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "description": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "peekOfCode": "def main():\n    for i in range(1, 101):\n        req_time, result = make_request()\n        print(f\"Request {i} - {req_time:.2f}s\")\n        # Optionally print the LLM output\n        print(\"Output:\", result.get(\"output\", \"No output found\"), \"\\n\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "autoppia_iwa_module.modules.llm_local.test.test_one_request_time",
        "documentation": {}
    },
    {
        "label": "make_parallel_request",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "description": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "peekOfCode": "def make_parallel_request(N=5):\n    \"\"\"\n    Sends a batch of N sub-requests to the /generate_parallel endpoint.\n    Each sub-request has its own set of messages.\n    \"\"\"\n    url = \"http://127.0.0.1:6000/generate_parallel\"\n    headers = {\"Content-Type\": \"application/json\"}\n    # Build the \"requests\" array with N copies (or variations) of the messages\n    requests_list = []\n    for i in range(N):",
        "detail": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "description": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Test parallel requests to /generate_parallel.\")\n    parser.add_argument(\n        \"--number_request\",\n        type=int,\n        default=5,\n        help=\"Number of sub-requests to batch in one call\"\n    )\n    args = parser.parse_args()\n    # Number of sub-requests to batch in one call",
        "detail": "autoppia_iwa_module.modules.llm_local.test.test_parallel_request",
        "documentation": {}
    },
    {
        "label": "model_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "model_name = \"openai/clip-vit-base-patch32\"\nmodel = CLIPModel.from_pretrained(model_name)\nprocessor = CLIPProcessor.from_pretrained(model_name)\n# 2. Load your screenshot (replace with your local file path or URL)\nimage_path = \"screenshot.png\"\nimage = Image.open(image_path).convert(\"RGB\")\n# 3. Define text labels for your use case\nlabels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "model = CLIPModel.from_pretrained(model_name)\nprocessor = CLIPProcessor.from_pretrained(model_name)\n# 2. Load your screenshot (replace with your local file path or URL)\nimage_path = \"screenshot.png\"\nimage = Image.open(image_path).convert(\"RGB\")\n# 3. Define text labels for your use case\nlabels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"\n]",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "processor",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "processor = CLIPProcessor.from_pretrained(model_name)\n# 2. Load your screenshot (replace with your local file path or URL)\nimage_path = \"screenshot.png\"\nimage = Image.open(image_path).convert(\"RGB\")\n# 3. Define text labels for your use case\nlabels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"\n]\n# 4. Process inputs for CLIP",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "image_path = \"screenshot.png\"\nimage = Image.open(image_path).convert(\"RGB\")\n# 3. Define text labels for your use case\nlabels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"\n]\n# 4. Process inputs for CLIP\ninputs = processor(\n    text=labels,",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "image = Image.open(image_path).convert(\"RGB\")\n# 3. Define text labels for your use case\nlabels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"\n]\n# 4. Process inputs for CLIP\ninputs = processor(\n    text=labels,\n    images=image,",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "labels = [\n    \"The user is logged in\",\n    \"The user is not logged in\"\n]\n# 4. Process inputs for CLIP\ninputs = processor(\n    text=labels,\n    images=image,\n    return_tensors=\"pt\",\n    padding=True",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "inputs = processor(\n    text=labels,\n    images=image,\n    return_tensors=\"pt\",\n    padding=True\n)\n# 5. Forward pass: get similarity logits for image-text pairs\nwith torch.no_grad():\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image  # shape: [batch_size, num_labels]",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "probs",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "probs = logits_per_image.softmax(dim=1)  # shape: [1, num_labels]\n# 7. Print out probabilities for each label\nfor label, prob in zip(labels, probs[0].tolist()):\n    print(f\"{label}: {prob:.4f}\")\n# Optionally, pick the label with the highest probability\npredicted_idx = logits_per_image.argmax(dim=1).item()\npredicted_label = labels[predicted_idx]\nprint(f\"\\nPredicted: {predicted_label}\")",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "predicted_idx",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "predicted_idx = logits_per_image.argmax(dim=1).item()\npredicted_label = labels[predicted_idx]\nprint(f\"\\nPredicted: {predicted_label}\")",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "predicted_label",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "peekOfCode": "predicted_label = labels[predicted_idx]\nprint(f\"\\nPredicted: {predicted_label}\")",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_clip",
        "documentation": {}
    },
    {
        "label": "generate_data",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "def generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters.\n    If json_format=True, attempts to repair and return valid JSON.\n    If schema is provided, instruct the model to strictly follow it.\n    Returns (response_text, tokens_in, tokens_out).\n    \"\"\"\n    try:\n        # If we have a JSON schema, prepend an instruction to produce valid JSON\n        if json_format and schema:",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "def handler():\n    # Increase total request count\n    counters[\"total_requests\"] += 1\n    request_number = counters[\"total_requests\"]  # This is our per-request number\n    try:\n        data = request.json or {}\n        # Extract the fields\n        messages = data.get(\"messages\", [])\n        temperature = float(data.get(\"temperature\", 0.1))\n        max_tokens = int(data.get(\"max_tokens\", 256))",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n# ---------------------------------------------------------------------------\n# The model name as per Qwen docs (Adjust if you prefer Qwen2-7B-Instruct, etc.)\n# ---------------------------------------------------------------------------\nMODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "MODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "model = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------\ncounters = {",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "peekOfCode": "counters = {\n    \"total_requests\": 0,\n    \"json_requests\": 0,\n    \"json_correctly_formatted\": 0,\n    \"json_repair_succeeded\": 0\n}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters.\n    If json_format=True, attempts to repair and return valid JSON.",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm",
        "documentation": {}
    },
    {
        "label": "generate_data",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).\n    If json_format=True, attempts to repair and return valid JSON.\n    If schema is provided, instruct the model to follow it strictly.\n    Returns (response_text, tokens_in, tokens_out).\n    \"\"\"\n    try:\n        # If we have a JSON schema, prepend an instruction to produce valid JSON\n        if json_format and schema:",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "generate_data_batch",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def generate_data_batch(requests, temperature, max_tokens):\n    \"\"\"\n    Generate text for multiple conversation \"requests\" in *one* batch.\n    Each element of `requests` is expected to be a dict containing:\n      - \"messages\": list of messages\n      - optionally \"json_format\": bool\n      - optionally \"schema\": dict\n    Returns:\n      outputs (list of response_texts),\n      total_tokens_in (int),",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def handler():\n    \"\"\"\n    Single-request endpoint: processes exactly one list-of-messages.\n    \"\"\"\n    counters[\"total_requests\"] += 1\n    request_number = counters[\"total_requests\"]\n    try:\n        data = request.json or {}\n        messages = data.get(\"messages\", [])\n        temperature = float(data.get(\"temperature\", 0.1))",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "handler_parallel",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "def handler_parallel():\n    \"\"\"\n    Batch-request endpoint: can process multiple sets of messages (requests) in one shot.\n    This is useful to compare throughput (tokens/second) vs many single requests.\n    Expected JSON format:\n    {\n      \"requests\": [\n        {\"messages\": [...], \"json_format\": false, \"schema\": null},\n        {\"messages\": [...], \"json_format\": true,  \"schema\": {...}},\n        ...",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "app = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n# ---------------------------------------------------------------------------\n# The model name as per Qwen docs (Adjust if you prefer Qwen2-7B-Instruct, etc.)\n# ---------------------------------------------------------------------------\nMODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "MODEL_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "MODEL_NAME = \"Qwen/Qwen2.5-14B-Instruct\"\n# Load tokenizer & model\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "tokenizer",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nmodel = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "model = AutoModelForCausalLM.from_pretrained(\n    MODEL_NAME,\n    torch_dtype=\"auto\",\n    device_map=\"auto\"\n)\nmodel.eval()\n# ---------------------------------------------------------------------------\n# Global counters (optional)\n# ---------------------------------------------------------------------------\ncounters = {",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "description": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "peekOfCode": "counters = {\n    \"total_requests\": 0,\n    \"json_requests\": 0,\n    \"json_correctly_formatted\": 0,\n    \"json_repair_succeeded\": 0\n}\ndef generate_data(messages, temperature, max_tokens, json_format=False, schema=None):\n    \"\"\"\n    Generate text using Qwen with the given parameters (single sequence).\n    If json_format=True, attempts to repair and return valid JSON.",
        "detail": "autoppia_iwa_module.modules.llm_local.run_local_llm_parallel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0009_alter_user_last_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelManagers(\n            name='user',\n            managers=[\n                ('objects', accounts.managers.UserManager()),\n            ],",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0002_auto_20190326_1754",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0002_auto_20190326_1754\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"first_name\",\n            field=models.CharField(\n                blank=True, max_length=150, verbose_name=\"first name\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0003_alter_user_first_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0003_alter_user_first_name\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.migrations.0004_alter_user_id",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    name = 'accounts'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.apps",
        "documentation": {}
    },
    {
        "label": "EmployeeRegistrationForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployeeRegistrationForm(UserCreationForm):\n    # gender = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, choices=GENDER_CHOICES)\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes\n        self.fields['gender'].required = True\n        self.fields['first_name'].label = \"First Name\"\n        self.fields['last_name'].label = \"Last Name\"\n        self.fields['password1'].label = \"Password\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployerRegistrationForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployerRegistrationForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes\n        self.fields['first_name'].label = \"Company Name\"\n        self.fields['last_name'].label = \"Company Address\"\n        self.fields['password1'].label = \"Password\"\n        self.fields['password2'].label = \"Confirm Password\"\n        self.fields['first_name'].widget.attrs.update({'placeholder': 'Enter Company Name'})",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class UserLoginForm(forms.Form):\n    email = forms.EmailField()\n    password = forms.CharField(\n        label=\"Password\",\n        strip=False,\n        widget=forms.PasswordInput,\n    )\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.user = None",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "EmployeeProfileUpdateForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "class EmployeeProfileUpdateForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        self.fields['first_name'].widget.attrs.update({'placeholder': 'Enter First Name'})\n        self.fields['last_name'].widget.attrs.update({'placeholder': 'Enter Last Name'})\n    class Meta:\n        model = User\n        fields = [\"first_name\", \"last_name\", \"gender\"]\n    def save(self, commit=True):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "GENDER_CHOICES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "peekOfCode": "GENDER_CHOICES = (\n    ('male', 'Male'),\n    ('female', 'Female')\n)\nclass EmployeeRegistrationForm(UserCreationForm):\n    # gender = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple, choices=GENDER_CHOICES)\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super().__init__(*args, **kwargs)\n        # Update field attributes",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Define a model manager for User model with no username field.\"\"\"\n    use_in_migrations = True\n    def _create_user(self, email, password, **extra_fields):\n        \"\"\"Create and save a User with the given email and password.\"\"\"\n        if not email:\n            raise ValueError('The given email must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.managers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "peekOfCode": "class User(AbstractUser):\n    username = None\n    role = models.CharField(max_length=12, error_messages={\n        'required': \"Role must be provided\"\n    })\n    gender = models.CharField(max_length=10, blank=True, null=True, default=\"\")\n    email = models.EmailField(unique=True, blank=False,\n                              error_messages={\n                                  'unique': \"A user with that email already exists.\",\n                              })",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "documentation": {}
    },
    {
        "label": "GENDER_CHOICES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "peekOfCode": "GENDER_CHOICES = (\n    ('male', 'Male'),\n    ('female', 'Female'))\nclass User(AbstractUser):\n    username = None\n    role = models.CharField(max_length=12, error_messages={\n        'required': \"Role must be provided\"\n    })\n    gender = models.CharField(max_length=10, blank=True, null=True, default=\"\")\n    email = models.EmailField(unique=True, blank=False,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "peekOfCode": "app_name = \"accounts\"\nurlpatterns = [\n                  path('employee/register', RegisterEmployeeView.as_view(), name='employee-register'),\n                  path('employer/register', RegisterEmployerView.as_view(), name='employer-register'),\n                  path('employee/profile/update', EditProfileView.as_view(), name='employer-profile-update'),\n                  path('logout', LogoutView.as_view(), name='logout'),\n                  path('login', LoginView.as_view(), name='login'),\n              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "peekOfCode": "urlpatterns = [\n                  path('employee/register', RegisterEmployeeView.as_view(), name='employee-register'),\n                  path('employer/register', RegisterEmployerView.as_view(), name='employer-register'),\n                  path('employee/profile/update', EditProfileView.as_view(), name='employer-profile-update'),\n                  path('logout', LogoutView.as_view(), name='logout'),\n                  path('login', LoginView.as_view(), name='login'),\n              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.urls",
        "documentation": {}
    },
    {
        "label": "BaseRegistrationView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class BaseRegistrationView(CreateView):\n    model = User\n    success_url = reverse_lazy('accounts:login')\n    extra_context = {'title': 'Register'}\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(self.success_url)\n        return super().dispatch(request, *args, **kwargs)\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterEmployeeView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class RegisterEmployeeView(BaseRegistrationView):\n    form_class = EmployeeRegistrationForm\n    template_name = 'accounts/employee/register.html'\n    def post_event(self, user):\n        web_agent_id = self.request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=user, event_type='profile_update', description='Employee profile created', web_agent_id=web_agent_id)\nclass RegisterEmployerView(BaseRegistrationView):\n    form_class = EmployerRegistrationForm\n    template_name = 'accounts/employer/register.html'\n    def post_event(self, user):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterEmployerView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class RegisterEmployerView(BaseRegistrationView):\n    form_class = EmployerRegistrationForm\n    template_name = 'accounts/employer/register.html'\n    def post_event(self, user):\n        web_agent_id = self.request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=user, event_type='profile_update', description='Employer profile created', web_agent_id=web_agent_id)\nclass LoginView(FormView):\n    \"\"\"\n    Provides the ability to login as a user with an email and password.\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class LoginView(FormView):\n    \"\"\"\n    Provides the ability to login as a user with an email and password.\n    \"\"\"\n    success_url = '/'\n    form_class = UserLoginForm\n    template_name = 'accounts/login.html'\n    extra_context = {'title': 'Login'}\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "peekOfCode": "class LogoutView(RedirectView):\n    \"\"\"\n    Provides users the ability to logout.\n    \"\"\"\n    url = '/login'\n    def get(self, request, *args, **kwargs):\n        web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n        create_event(user=request.user, event_type='logout', description='User logged out', web_agent_id=web_agent_id)\n        auth.logout(request)\n        messages.success(request, 'You are now logged out')",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Event\",\n            fields=[\n                (",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"events\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"event\",\n            name=\"event_type\",\n            field=models.CharField(\n                choices=[",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0002_alter_event_event_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"events\", \"0002_alter_event_event_type\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"event\",\n            name=\"web_agent_id\",\n            field=models.CharField(blank=True, max_length=100, null=True),\n        ),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.migrations.0003_event_web_agent_id",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"events\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.apps",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "peekOfCode": "EVENTS_ALLOWED = [\n    \"registration\",\n    \"login\",\n    \"logout\",\n    \"password_change\",\n    \"profile_update\",\n    \"job_application\",\n    \"job_post_creation\",\n    \"job_post_update\",\n    \"job_post_deletion\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.events",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "peekOfCode": "class Event(models.Model):\n    EVENT_TYPES = [\n        ('registration', 'User Registration'),\n        ('login', 'User Login'),\n        ('logout', 'User Logout'),\n        ('password_change', 'Password Change'),\n        ('profile_update', 'Profile Update'),\n        ('job_application', 'Job Application'),\n        ('job_post_creation', 'Job Post Creation'),\n        ('job_post_update', 'Job Post Update'),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.models",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "peekOfCode": "class EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = '__all__'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"events/list/\", get_events, name=\"event-list\"),\n    path(\"events/my/\", my_events, name=\"my_events\"),\n    path(\"events/reset/\", reset_events, name=\"reset_events\"),\n    path(\"events/add/\", add_event, name=\"add_events\"),\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.urls",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "peekOfCode": "def create_event(user, event_type, description, data=None, web_agent_id=None):\n    \"\"\"\n    Create an event in the database.\n    Args:\n        user (User): The user associated with the event (can be None).\n        event_type (str): The type of the event (must be one of Event.EVENT_TYPES).\n        description (str): A brief description of the event.\n        data (dict): Additional data to store with the event.\n    \"\"\"\n    Event.objects.create(",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.utils",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def get_events(request):\n    \"\"\"\n    Fetch events for the web_agent identified by the provided `web_agent_id`.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")  # Retrieve web_agent_id from query params\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    events = Event.objects.filter(web_agent_id=web_agent_id).order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "my_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def my_events(request):\n    \"\"\"\n    Get all my events\n    \"\"\"\n    # user = request.user\n    # user_email = request.data.get(\"user_email\")\n    # user = User.objects.get(email=user_email)\n    events = Event.objects.order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "reset_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def reset_events(request):\n    \"\"\"\n    Delete Events\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    Event.objects.filter(web_agent_id=web_agent_id).delete()\n    return Response(\n        {\"message\": f\"Events for web_agent '{web_agent_id}' have been deleted successfully.\"},",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "peekOfCode": "def add_event(request):\n    \"\"\"\n    Add a new event to the database.\n    Expected JSON payload:\n    {\n        \"web_agent_id\": \"example-webAgent-id\",\n        \"event_type\": \"example-event-type\",\n        \"event_data\": { ... }  # JSON object with event-specific data\n    }\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.events.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parents[1]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web_demo_1_job_portal\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web_demo_1_job_portal\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web_demo_1_job_portal\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web_demo_1_job_portal\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }\n}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"jobsapp\",\n    \"accounts\",\n    \"rest_framework\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"whitenoise.middleware.WhiteNoiseMiddleware\",\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "ROOT_URLCONF = \"jobs.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "WSGI_APPLICATION = \"jobs.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n# DATABASES = {\n#     \"default\": {\n#         \"ENGINE\": \"django.db.backends.sqlite3\",\n#         \"NAME\": BASE_DIR / \"job_portal.sqlite3\",\n#     }\n# }\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Password validation\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    # },",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    # },\n    # {\n    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    # },",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"django-portal.herokuapp.com\", \"localhost\", \"*\"]\nSTATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\nSTATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "STATICFILES_STORAGE = \"whitenoise.storage.CompressedManifestStaticFilesStorage\"\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / \"media\"\nAUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"API Docs\",\n        default_version=\"v1\",\n        description=\"\"\"An Online Job Portal Project in Django is a platform for job seekers to find appropriate jobs while companies can publish their vacancies and find good candidates.\nJobseekers can:\n1. Post their resumes.\n2. Browse for job searches.\n3. View personal work listings.\nCompanies can:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"jobsapp.urls\")),\n    path(\"\", include(\"accounts.urls\")),\n    path(\n        \"api/\", include(\"events.urls\")\n    ),  # Incluye las URLs de la aplicación de eventos\n    re_path(\n        r\"^swagger(?P<format>\\.json|\\.yaml)$\",\n        schema_view.without_ui(cache_timeout=0),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "peekOfCode": "application = get_wsgi_application()\napplication = WhiteNoise(application)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "peekOfCode": "application = WhiteNoise(application)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobs.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with initial data.\"\n    def handle(self, *args, **options):\n        reset_database()\n        self.stdout.write(self.style.SUCCESS(\"Database seeded successfully.\"))",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.management.commands.seed_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('accounts', '0002_auto_20190326_1754'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Job',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='job',\n            name='type',\n            field=models.CharField(choices=[('1', 'Full time'), ('2', 'Part time'), ('3', 'Internship')],\n                                   max_length=10),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0002_auto_20190405_1920",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0002_auto_20190405_1920'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='job',\n            name='created_at',\n            field=models.DateTimeField(default=django.utils.timezone.now),\n        ),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0003_job_created_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0003_job_created_at'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='job',\n            name='filled',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0004_job_filled",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_auto_20190326_1754'),\n        ('jobsapp', '0004_job_filled'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Applicant',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0005_applicant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0005_applicant'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='applicant',\n            name='job',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applicants',\n                                    to='jobsapp.Job'),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0006_auto_20190408_2005",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"jobsapp\", \"0006_auto_20190408_2005\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"applicant\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0007_alter_applicant_id_alter_job_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('jobsapp', '0007_alter_applicant_id_alter_job_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contact',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.migrations.0008_contact_job_salary",
        "documentation": {}
    },
    {
        "label": "is_already_applied",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "peekOfCode": "def is_already_applied(job, user):\n    applied = Applicant.objects.filter(job=job, user=user)\n    if applied:\n        return True\n    else:\n        return False",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "peekOfCode": "register = template.Library()\n@register.simple_tag(name='is_already_applied')\ndef is_already_applied(job, user):\n    applied = Applicant.objects.filter(job=job, user=user)\n    if applied:\n        return True\n    else:\n        return False",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.templatetags.is_already_applied",
        "documentation": {}
    },
    {
        "label": "EditProfileView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "peekOfCode": "class EditProfileView(UpdateView):\n    model = User\n    form_class = EmployeeProfileUpdateForm\n    context_object_name = 'employee'\n    template_name = 'jobs/employee/edit-profile.html'\n    success_url = reverse_lazy('accounts:employer-profile-update')\n    @method_decorator(login_required(login_url=reverse_lazy('accounts:login')))\n    @method_decorator(user_is_employee)\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(self.request, *args, **kwargs)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employee",
        "documentation": {}
    },
    {
        "label": "DashboardView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class DashboardView(ListView):\n    model = Job\n    template_name = 'jobs/employer/dashboard.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        return self.model.objects.filter(user_id=self.request.user.id)\n@method_decorator([login_required(login_url=reverse_lazy('accounts:login')), user_is_employer], name='dispatch')\nclass ApplicantPerJobView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/applicants.html'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "ApplicantPerJobView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class ApplicantPerJobView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/applicants.html'\n    context_object_name = 'applicants'\n    paginate_by = 10\n    def get_queryset(self):\n        return Applicant.objects.filter(job_id=self.kwargs['job_id']).order_by('id')\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['job'] = get_object_or_404(Job, id=self.kwargs['job_id'])",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "JobCreateView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class JobCreateView(CreateView):\n    template_name = 'jobs/create.html'\n    form_class = CreateJobForm\n    extra_context = {\n        'title': 'Post New Job'\n    }\n    success_url = reverse_lazy('jobs:employer-dashboard')\n    @method_decorator(login_required(login_url=reverse_lazy('accounts:login')))\n    def dispatch(self, request, *args, **kwargs):\n        if not self.request.user.is_authenticated:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "ApplicantsListView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "class ApplicantsListView(ListView):\n    model = Applicant\n    template_name = 'jobs/employer/all-applicants.html'\n    context_object_name = 'applicants'\n    def get_queryset(self):\n        # jobs = Job.objects.filter(user_id=self.request.user.id)\n        return self.model.objects.filter(job__user_id=self.request.user.id)\n@login_required(login_url=reverse_lazy('accounts:login'))\ndef filled(request, job_id=None):\n    job = get_object_or_404(Job, user_id=request.user.id, id=job_id)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "filled",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "peekOfCode": "def filled(request, job_id=None):\n    job = get_object_or_404(Job, user_id=request.user.id, id=job_id)\n    job.filled = True\n    job.save()\n    # Use the create_event utility function\n    create_event(\n        event_type='job_post_update',\n        description=f\"Job post '{job.title}' marked as filled.\",\n        user=request.user,\n        data={'job_id': job.id, 'title': job.title},",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.employer",
        "documentation": {}
    },
    {
        "label": "HomeView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class HomeView(ListView):\n    model = Job\n    template_name = 'home.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        return self.model.objects.all()[:6]\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['trendings'] = self.model.objects.filter(created_at__month=timezone.now().month)[:3]\n        # Log event for home page view",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "SearchView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class SearchView(ListView):\n    model = Job\n    template_name = 'jobs/search.html'\n    context_object_name = 'jobs'\n    def get_queryset(self):\n        location = self.request.GET.get('location', '')\n        position = self.request.GET.get('position', '')\n        queryset = self.model.objects.filter(location__icontains=location, title__icontains=position)\n        # Log event for search\n        if self.request.user.is_authenticated:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "JobListView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class JobListView(ListView):\n    model = Job\n    template_name = 'jobs/jobs.html'\n    context_object_name = 'jobs'\n    paginate_by = 5\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        # Log event for job list view\n        if self.request.user.is_authenticated:\n            create_event(",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "JobDetailsView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class JobDetailsView(DetailView):\n    model = Job\n    template_name = 'jobs/details.html'\n    context_object_name = 'job'\n    pk_url_kwarg = 'id'\n    def get_object(self, queryset=None):\n        obj = super(JobDetailsView, self).get_object(queryset=queryset)\n        if obj is None:\n            raise Http404(\"Job doesn't exist\")\n        return obj",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "ApplyJobView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class ApplyJobView(CreateView):\n    model = Applicant\n    form_class = ApplyJobForm\n    slug_field = 'job_id'\n    slug_url_kwarg = 'job_id'\n    def post(self, request, *args, **kwargs):\n        form = self.get_form()\n        if form.is_valid():\n            messages.info(self.request, 'Successfully applied for the job!')\n            return self.form_valid(form)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "ContactView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class ContactView(View):\n    def get(self, request):\n        form = ContactForm()\n        return render(request, 'jobs/contact.html', {'form': form})\n    def post(self, request):\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Process the form data\n            form.save()\n            return render(request, 'jobs/contact.html', {'form': form, 'success': True})",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "AboutView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "peekOfCode": "class AboutView(TemplateView):\n    template_name = \"jobs/about.html\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.home",
        "documentation": {}
    },
    {
        "label": "reset_seed",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "peekOfCode": "def reset_seed(request):\n    \"\"\"Endpoint to reset the database and seed initial data.\"\"\"\n    if request.method == \"POST\":\n        try:\n            reset_database()\n            return JsonResponse({\"status\": \"success\", \"message\": \"Database reset and seeded successfully.\"}, status=200)\n        except Exception as e:\n            return JsonResponse({\"status\": \"error\", \"message\": str(e)}, status=500)\n    return JsonResponse({\"status\": \"error\", \"message\": \"Invalid request method.\"}, status=405)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.views.reset_events",
        "documentation": {}
    },
    {
        "label": "JobsAppConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "peekOfCode": "class JobsAppConfig(AppConfig):\n    name = 'jobsapp'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.apps",
        "documentation": {}
    },
    {
        "label": "user_is_employer",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "peekOfCode": "def user_is_employer(function):\n    def wrap(request, *args, **kwargs):\n        user = request.user\n        if user.role == 'employer':\n            return function(request, *args, **kwargs)\n        else:\n            raise PermissionDenied\n    return wrap\ndef user_is_employee(function):\n    def wrap(request, *args, **kwargs):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "user_is_employee",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "peekOfCode": "def user_is_employee(function):\n    def wrap(request, *args, **kwargs):\n        user = request.user\n        if user.role == 'employee':\n            return function(request, *args, **kwargs)\n        else:\n            raise PermissionDenied\n    return wrap",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.decorators",
        "documentation": {}
    },
    {
        "label": "CreateJobForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class CreateJobForm(forms.ModelForm):\n    class Meta:\n        model = Job\n        exclude = ('user', 'created_at',)\n    def is_valid(self):\n        valid = super(CreateJobForm, self).is_valid()\n        # if already valid, then return True\n        if valid:\n            return valid\n        return valid",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ApplyJobForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class ApplyJobForm(forms.ModelForm):\n    class Meta:\n        model = Applicant\n        fields = ('job',)\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = ['name', 'email', 'subject', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 5}),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "peekOfCode": "class ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = ['name', 'email', 'subject', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 5}),\n        }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.forms",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Job(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=300)\n    description = models.TextField()\n    location = models.CharField(max_length=150)\n    type = models.CharField(choices=JOB_TYPE, max_length=10)\n    category = models.CharField(max_length=100)\n    last_date = models.DateTimeField()\n    company_name = models.CharField(max_length=100)\n    company_description = models.CharField(max_length=300)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Applicant",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Applicant(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name='applicants')\n    created_at = models.DateTimeField(default=timezone.now)\n    def __str__(self):\n        return self.user.get_full_name()\nclass Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=150)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "class Contact(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=150)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.subject",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "JOB_TYPE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "peekOfCode": "JOB_TYPE = (\n    ('1', \"Full time\"),\n    ('2', \"Part time\"),\n    ('3', \"Internship\"),\n)\nclass Job(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=300)\n    description = models.TextField()\n    location = models.CharField(max_length=150)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.models",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "peekOfCode": "def reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Job.objects.all().delete()\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user\n    user, created = User.objects.get_or_create(\n        email=\"admin@jobsapp.com\",\n        defaults={",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "base_dir",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "peekOfCode": "base_dir = Path(__file__).resolve().parent\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jobs.settings')\ndjango.setup()\nfrom jobsapp.models import Job\nfrom accounts.models import User\ndef reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Job.objects.all().delete()\n    Event.objects.all().delete()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.reset_seed",
        "documentation": {}
    },
    {
        "label": "JobSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "peekOfCode": "class JobSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Job model.\n    Fields:\n        - id: Integer, unique identifier for the job.\n        - title: String, title of the job.\n        - description: Text, detailed description of the job.\n        - location: String, location where the job is based.\n        - salary: Decimal, salary for the job.\n        - created_at: DateTime, timestamp when the job was created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "documentation": {}
    },
    {
        "label": "ApplicantSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "peekOfCode": "class ApplicantSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Applicant model.\n    Fields:\n        - id: Integer, unique identifier for the applicant.\n        - job: ForeignKey, reference to the job being applied for.\n        - user: ForeignKey, reference to the user applying for the job.\n        - resume: File, resume of the applicant.\n        - cover_letter: Text, cover letter from the applicant.\n        - applied_at: DateTime, timestamp when the application was submitted.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "app_name = \"jobs\"\nrouter = DefaultRouter()\nrouter.register(r'jobs', JobViewSet)\nrouter.register(r'applicants', ApplicantViewSet)\nurlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'jobs', JobViewSet)\nrouter.register(r'applicants', ApplicantViewSet)\nurlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),\n    path('employer/dashboard', include([",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', RedirectView.as_view(url='/home', permanent=True), name='redirect-to-home'),  # Redirige / a /home\n    path('home', HomeView.as_view(), name='home'), path('search', SearchView.as_view(), name='search'),\n    path('contact/', ContactView.as_view(), name='contact'),\n    path('about/', AboutView.as_view(), name='about'),\n    path(\"reset_seed/\", reset_seed, name=\"reset_seed\"),\n    path('employer/dashboard', include([\n        path('', DashboardView.as_view(), name='employer-dashboard'),\n        path('all-applicants', ApplicantsListView.as_view(), name='employer-all-applicants'),\n        path('applicants/<int:job_id>', ApplicantPerJobView.as_view(), name='employer-dashboard-applicants'),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.urls",
        "documentation": {}
    },
    {
        "label": "JobViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "peekOfCode": "class JobViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing job instances.\n    Provides endpoints:\n        - GET /jobs/: Retrieve a list of jobs.\n        - POST /jobs/: Create a new job.\n        - GET /jobs/{id}/: Retrieve a job by ID.\n        - PUT /jobs/{id}/: Update a job by ID.\n        - PATCH /jobs/{id}/: Partially update a job by ID.\n        - DELETE /jobs/{id}/: Delete a job by ID.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "documentation": {}
    },
    {
        "label": "ApplicantViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "peekOfCode": "class ApplicantViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing applicant instances.\n    Provides endpoints:\n        - GET /applicants/: Retrieve a list of applicants.\n        - POST /applicants/: Create a new applicant.\n        - GET /applicants/{id}/: Retrieve an applicant by ID.\n        - PUT /applicants/{id}/: Update an applicant by ID.\n        - PATCH /applicants/{id}/: Partially update an applicant by ID.\n        - DELETE /applicants/{id}/: Delete an applicant by ID.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.jobsapp.viewsets",
        "documentation": {}
    },
    {
        "label": "DEMO_WEB_PROJECT_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.config",
        "description": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.config",
        "peekOfCode": "DEMO_WEB_PROJECT_CONFIG = {\n    \"name\" : \"Jobs Portal\",\n    \"events\" : EVENTS_ALLOWED\n}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_1_demo_django_jobs.config",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent.parent\n# pythondjangocrud/\nAPPS_DIR = ROOT_DIR / \"pythondjangocrud\"\nenv = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "APPS_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "APPS_DIR = ROOT_DIR / \"pythondjangocrud\"\nenv = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "env = environ.Env()\n#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "#READ_DOT_ENV_FILE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "#READ_DOT_ENV_FILE = env.bool(\"DJANGO_READ_DOT_ENV_FILE\", default=False)\n#if READ_DOT_ENV_FILE:\n# OS environment variables take precedence over variables from .env\nenv.read_env(str(ROOT_DIR / \".env\"))\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#debug\nDEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DEBUG = env.bool(\"DJANGO_DEBUG\", False)\n# Local time zone. Choices are\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# though not all of them may be available with every OS.\n# In Windows, this must be set to your system time zone.\nTIME_ZONE = \"UTC\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#language-code\nLANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "TIME_ZONE = \"UTC\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#language-code\nLANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#site-id\nSITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SITE_ID = 1\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n\nUSE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_I18N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n\nUSE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_L10N = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz\nUSE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "USE_TZ = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths\nLOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOCALE_PATHS = [str(ROOT_DIR / \"locale\")]\n# DATABASES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#databases\nDATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DATABASES = {\n    \"default\": env.db(\"DATABASE_URL\", default=\"postgres://postgres:12345678@localhost:5432/pythondjangocrud\")\n}\nDATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf\nROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"][\"ATOMIC_REQUESTS\"]",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True\n# URLS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf\nROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ROOT_URLCONF = \"config.urls\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application\nWSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "WSGI_APPLICATION = \"config.wsgi.application\"\n# APPS\n# ------------------------------------------------------------------------------\nDJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "DJANGO_APPS = [\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.sites\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # \"django.contrib.humanize\", # Handy template tags\n    \"django.contrib.admin\",\n    \"django.forms\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    \"crispy_forms\",\n    \"allauth\",\n    \"allauth.account\",\n    \"allauth.socialaccount\",\n    \"rest_framework\",\n    \"rest_framework.authtoken\",\n    \"corsheaders\",\n    \"drf_yasg\",\n    \"django_rest_passwordreset\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOCAL_APPS = [\n    \"pythondjangocrud.apps.users.apps.UsersConfig\",\n    \"pythondjangocrud.apps.employee.apps.EmployeeConfig\",\n    \"pythondjangocrud.apps.department.apps.DepartmentConfig\",\n    \"pythondjangocrud.apps.position.apps.PositionConfig\",\n    \"pythondjangocrud.apps.attendance.apps.AttendanceConfig\",\n    \"pythondjangocrud.apps.payroll.apps.PayrollConfig\",\n    \"pythondjangocrud.apps.events.apps.EventsConfig\",\n    # Your stuff: custom apps go here\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\n# MIGRATIONS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#migration-modules\nMIGRATION_MODULES = {\"sites\": \"pythondjangocrud.contrib.sites.migrations\"}\n# AUTHENTICATION\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MIGRATION_MODULES = {\"sites\": \"pythondjangocrud.contrib.sites.migrations\"}\n# AUTHENTICATION\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model\nAUTH_USER_MODEL = \"users.User\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"allauth.account.auth_backends.AuthenticationBackend\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model\nAUTH_USER_MODEL = \"users.User\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url\n# LOGIN_REDIRECT_URL = \"users:redirect\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-url\n# LOGIN_URL = \"account_login\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTH_USER_MODEL = \"users.User\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url\n# LOGIN_REDIRECT_URL = \"users:redirect\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#login-url\n# LOGIN_URL = \"account_login\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\n    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "PASSWORD_HASHERS = [\n    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n]\n# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\"\n    },\n    {\"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\"},\n    {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n]\n# MIDDLEWARE\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    # \"whitenoise.middleware.WhiteNoiseMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATIC_ROOT = str(ROOT_DIR / \"staticfiles\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#static-url\nSTATIC_URL = \"/static/\"\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS\nSTATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS\nSTATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATICFILES_DIRS = [str(APPS_DIR / \"static\")]\n# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders\nSTATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-root\nMEDIA_ROOT = str(APPS_DIR / \"media\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "STATICFILES_FINDERS = [\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n# MEDIA\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-root\nMEDIA_ROOT = str(APPS_DIR / \"media\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-url\nMEDIA_URL = \"/media/\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MEDIA_ROOT = str(APPS_DIR / \"media\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#media-url\nMEDIA_URL = \"/media/\"\n# TEMPLATES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#templates\nTEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# TEMPLATES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#templates\nTEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        # https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs\n        \"DIRS\": [str(APPS_DIR / \"templates\")],",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        # https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs\n        \"DIRS\": [str(APPS_DIR / \"templates\")],\n        \"OPTIONS\": {\n            # https://docs.djangoproject.com/en/dev/ref/settings/#template-loaders\n            # https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types\n            \"loaders\": [",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FORM_RENDERER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "FORM_RENDERER = \"django.forms.renderers.TemplatesSetting\"\n# http://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# FIXTURES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs\nFIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# FIXTURES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs\nFIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly\nSESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "FIXTURE_DIRS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "FIXTURE_DIRS = (str(APPS_DIR / \"fixtures\"),)\n# SECURITY\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly\nSESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly\nCSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SESSION_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly\nCSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CSRF_COOKIE_HTTPONLY = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter\nSECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECURE_BROWSER_XSS_FILTER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SECURE_BROWSER_XSS_FILTER = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options\nX_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "X_FRAME_OPTIONS = \"DENY\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout\nEMAIL_TIMEOUT = 5",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "EMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\",\n    default=\"django.core.mail.backends.smtp.EmailBackend\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout\nEMAIL_TIMEOUT = 5\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL.\nADMIN_URL = \"admin/\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "EMAIL_TIMEOUT = 5\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL.\nADMIN_URL = \"admin/\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#admins\nADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMIN_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ADMIN_URL = \"admin/\"\n# https://docs.djangoproject.com/en/dev/ref/settings/#admins\nADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ADMINS = [(\"\"\"Daniel Roy Greenfeld\"\"\", \"daniel-roy-greenfeld@example.com\")]\n# https://docs.djangoproject.com/en/dev/ref/settings/#managers\nMANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "MANAGERS = ADMINS\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"%(levelname)s %(asctime)s %(module)s \"\n                        \"%(process)d %(thread)d %(message)s\"\n        }\n    },\n    \"handlers\": {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ALLOW_REGISTRATION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_ALLOW_REGISTRATION = env.bool(\"DJANGO_ACCOUNT_ALLOW_REGISTRATION\", True)\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_AUTHENTICATION_METHOD = \"username\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"username\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "ACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.AccountAdapter\"\n# https://django-allauth.readthedocs.io/en/latest/configuration.html\nSOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "SOCIALACCOUNT_ADAPTER = \"pythondjangocrud.apps.users.adapters.SocialAccountAdapter\"\n# django-rest-framework\n# -------------------------------------------------------------------------------\n# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',\n        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'djangorestframework_camel_case.parser.CamelCaseFormParser',\n        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',\n        'djangorestframework_camel_case.parser.CamelCaseJSONParser',\n    ),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "JWT_AUTH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "JWT_AUTH = {\n    'JWT_VERIFY': True,\n    'JWT_VERIFY_EXPIRATION': True,\n    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=15),\n    'JWT_ALLOW_REFRESH': True,\n    'JWT_AUTH_HEADER_PREFIX': 'JWT',\n}\n# django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup\n# CORS_URLS_REGEX = r\"^/api/.*$\"\n# Your stuff...",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"fallback-insecure-key\")\nDEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"True\") == \"True\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"web2_personal_mgmt\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"autoppia_2025\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"127.0.0.1\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"5432\"),\n    }\n}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "ALLOWED_HOSTS = [\"localhost\", \"0.0.0.0\", \"127.0.0.1\"]\n# CACHES\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#caches\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"\",\n    }\n}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"\",\n    }\n}\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = env(",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "EMAIL_BACKEND = env(\n    \"DJANGO_EMAIL_BACKEND\", default=\"django.core.mail.backends.console.EmailBackend\"\n)\n# django-debug-toolbar\n# ------------------------------------------------------------------------------\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#prerequisites\nINSTALLED_APPS += [\"debug_toolbar\"]  # noqa F405\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#middleware\nMIDDLEWARE += [\"debug_toolbar.middleware.DebugToolbarMiddleware\"]  # noqa F405\n# https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html#debug-toolbar-config",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "DEBUG_TOOLBAR_CONFIG = {\n    \"DISABLE_PANELS\": [\"debug_toolbar.panels.redirects.RedirectsPanel\"],\n    \"SHOW_TEMPLATE_CONTEXT\": True,\n}\n# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#internal-ips\nINTERNAL_IPS = [\"127.0.0.1\", \"10.0.2.2\"]\nif env(\"USE_DOCKER\") == \"yes\":\n    import socket\n    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())\n    INTERNAL_IPS += [\".\".join(ip.split(\".\")[:-1] + [\"1\"]) for ip in ips]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "peekOfCode": "INTERNAL_IPS = [\"127.0.0.1\", \"10.0.2.2\"]\nif env(\"USE_DOCKER\") == \"yes\":\n    import socket\n    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())\n    INTERNAL_IPS += [\".\".join(ip.split(\".\")[:-1] + [\"1\"]) for ip in ips]\n# django-extensions\n# ------------------------------------------------------------------------------\n# https://django-extensions.readthedocs.io/en/latest/installation_instructions.html#configuration\nINSTALLED_APPS += [\"django_extensions\"]  # noqa F405\n# Your stuff...",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.local",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parents[2]\n# GENERAL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key\nSECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECRET_KEY = env(\"DJANGO_SECRET_KEY\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405\n# DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True  # noqa F405\n# DATABASES[\"default\"][\"CONN_MAX_AGE\"] = env.int(\"CONN_MAX_AGE\", default=60)  # noqa F405\nDATABASES = {\n    \"default\": {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[\"deelop.com\"])\n# DATABASES\n# ------------------------------------------------------------------------------\n# DATABASES[\"default\"] = env.db(\"DATABASE_URL\")  # noqa F405\n# DATABASES[\"default\"][\"ATOMIC_REQUESTS\"] = True  # noqa F405\n# DATABASES[\"default\"][\"CONN_MAX_AGE\"] = env.int(\"CONN_MAX_AGE\", default=60)  # noqa F405\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # Ajusta el nombre de tu archivo SQLite",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",  # Ajusta el nombre de tu archivo SQLite\n        \"ATOMIC_REQUESTS\": True,\n        \"CONN_MAX_AGE\": 60,\n    }\n}\n# CACHES\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": env(\"REDIS_URL\"),\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            # Mimicing memcache behavior.\n            # https://github.com/jazzband/django-redis#memcached-exceptions-behavior\n            \"IGNORE_EXCEPTIONS\": True,\n        },",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-ssl-redirect\nSECURE_SSL_REDIRECT = env.bool(\"DJANGO_SECURE_SSL_REDIRECT\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-secure\nSESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_SSL_REDIRECT",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_SSL_REDIRECT = env.bool(\"DJANGO_SECURE_SSL_REDIRECT\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-secure\nSESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SESSION_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure\nCSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\n# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds\n# TODO: set this to 60 seconds first and then to 518400 once you prove the former works\nSECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_SECONDS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_SECONDS = 60\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains\nSECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload\nSECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_INCLUDE_SUBDOMAINS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(\n    \"DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS\", default=True\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload\nSECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_HSTS_PRELOAD",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_HSTS_PRELOAD = env.bool(\"DJANGO_SECURE_HSTS_PRELOAD\", default=True)\n# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff\nSECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES\n# ------------------------------------------------------------------------------\n# https://django-storages.readthedocs.io/en/latest/#installation\nINSTALLED_APPS += [\"storages\"]  # noqa F405\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECURE_CONTENT_TYPE_NOSNIFF",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SECURE_CONTENT_TYPE_NOSNIFF = env.bool(\n    \"DJANGO_SECURE_CONTENT_TYPE_NOSNIFF\", default=True\n)\n# STORAGES\n# ------------------------------------------------------------------------------\n# https://django-storages.readthedocs.io/en/latest/#installation\nINSTALLED_APPS += [\"storages\"]  # noqa F405\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_ACCESS_KEY_ID = env(\"DJANGO_AWS_ACCESS_KEY_ID\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_ACCESS_KEY_ID = env(\"DJANGO_AWS_ACCESS_KEY_ID\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_SECRET_ACCESS_KEY = env(\"DJANGO_AWS_SECRET_ACCESS_KEY\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = env(\"DJANGO_AWS_SECRET_ACCESS_KEY\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_QUERYSTRING_AUTH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_QUERYSTRING_AUTH = False\n# DO NOT change these unless you know what you're doing.\n_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "_AWS_EXPIRY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "_AWS_EXPIRY = 60 * 60 * 24 * 7\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_OBJECT_PARAMETERS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": f\"max-age={_AWS_EXPIRY}, s-maxage={_AWS_EXPIRY}, must-revalidate\"\n}\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#settings\nAWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_REGION_NAME = env(\"DJANGO_AWS_S3_REGION_NAME\", default=None)\n# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html#cloudfront\nAWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "AWS_S3_CUSTOM_DOMAIN",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "AWS_S3_CUSTOM_DOMAIN = env(\"DJANGO_AWS_S3_CUSTOM_DOMAIN\", default=None)\naws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "aws_s3_domain",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "aws_s3_domain = AWS_S3_CUSTOM_DOMAIN or f\"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com\"\n# STATIC\n# ------------------------\nSTATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "STATICFILES_STORAGE = \"django.contrib.staticfiles.storage.StaticFilesStorage\"\nCOLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "COLLECTFAST_STRATEGY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "COLLECTFAST_STRATEGY = \"collectfast.strategies.boto3.Boto3Strategy\"\nSTATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "STATIC_URL = f\"https://{aws_s3_domain}/static/\"\n# MEDIA\n# ------------------------------------------------------------------------------\nDEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DEFAULT_FILE_STORAGE = \"pythondjangocrud.utils.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "MEDIA_URL = f\"https://{aws_s3_domain}/media/\"\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email\nDEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email\nSERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "DEFAULT_FROM_EMAIL = env(\n    \"DJANGO_DEFAULT_FROM_EMAIL\",\n    default=\"pythondjangocrud <noreply@deelop.com>\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#server-email\nSERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix\nEMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SERVER_EMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SERVER_EMAIL = env(\"DJANGO_SERVER_EMAIL\", default=DEFAULT_FROM_EMAIL)\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix\nEMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",\n)\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL regex.\nADMIN_URL = env(\"DJANGO_ADMIN_URL\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "EMAIL_SUBJECT_PREFIX = env(\n    \"DJANGO_EMAIL_SUBJECT_PREFIX\",\n    default=\"[pythondjangocrud]\",\n)\n# ADMIN\n# ------------------------------------------------------------------------------\n# Django Admin URL regex.\nADMIN_URL = env(\"DJANGO_ADMIN_URL\")\n# Anymail\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ADMIN_URL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ADMIN_URL = env(\"DJANGO_ADMIN_URL\")\n# Anymail\n# ------------------------------------------------------------------------------\n# https://anymail.readthedocs.io/en/stable/installation/#installing-anymail\nINSTALLED_APPS += [\"anymail\"]  # noqa F405\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\n# https://anymail.readthedocs.io/en/stable/installation/#anymail-settings-reference\n# https://anymail.readthedocs.io/en/stable/esps/mailgun/\nEMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\nANYMAIL = {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "EMAIL_BACKEND = \"anymail.backends.mailgun.EmailBackend\"\nANYMAIL = {\n    \"MAILGUN_API_KEY\": env(\"MAILGUN_API_KEY\"),\n    \"MAILGUN_SENDER_DOMAIN\": env(\"MAILGUN_DOMAIN\"),\n    \"MAILGUN_API_URL\": env(\"MAILGUN_API_URL\", default=\"https://api.mailgun.net/v3\"),\n}\n# Collectfast\n# ------------------------------------------------------------------------------\n# https://github.com/antonagestam/collectfast#installation\nINSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "ANYMAIL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "ANYMAIL = {\n    \"MAILGUN_API_KEY\": env(\"MAILGUN_API_KEY\"),\n    \"MAILGUN_SENDER_DOMAIN\": env(\"MAILGUN_DOMAIN\"),\n    \"MAILGUN_API_URL\": env(\"MAILGUN_API_URL\", default=\"https://api.mailgun.net/v3\"),\n}\n# Collectfast\n# ------------------------------------------------------------------------------\n# https://github.com/antonagestam/collectfast#installation\nINSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405\n# LOGGING",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "INSTALLED_APPS = [\"collectfast\"] + INSTALLED_APPS  # noqa F405\n# LOGGING\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#logging\n# See https://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"%(levelname)s %(asctime)s %(module)s \"\n            \"%(process)d %(thread)d %(message)s\"\n        }\n    },\n    \"handlers\": {",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SENTRY_DSN",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SENTRY_DSN = env(\"SENTRY_DSN\")\nSENTRY_LOG_LEVEL = env.int(\"DJANGO_SENTRY_LOG_LEVEL\", logging.INFO)\nsentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SENTRY_LOG_LEVEL",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "SENTRY_LOG_LEVEL = env.int(\"DJANGO_SENTRY_LOG_LEVEL\", logging.INFO)\nsentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "sentry_logging",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "sentry_logging = LoggingIntegration(\n    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs\n    event_level=logging.ERROR,  # Send errors as events\n)\nintegrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),\n    traces_sample_rate=env.float(\"SENTRY_TRACES_SAMPLE_RATE\", default=0.0),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "integrations",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "peekOfCode": "integrations = [sentry_logging, DjangoIntegration(), RedisIntegration()]\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    integrations=integrations,\n    environment=env(\"SENTRY_ENVIRONMENT\", default=\"production\"),\n    traces_sample_rate=env.float(\"SENTRY_TRACES_SAMPLE_RATE\", default=0.0),\n)\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.production",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "SECRET_KEY = env(\n    \"DJANGO_SECRET_KEY\",\n    default=\"LPMKcs5vJCBeiJYCD9ircFBAZAdgDp9LCjI1RL3DkEHj5Mwp5F2Ts0aMrq9JKZVN\",\n)\n# https://docs.djangoproject.com/en/dev/ref/settings/#test-runner\nTEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "TEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n# PASSWORDS\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers\nPASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "PASSWORD_HASHERS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "PASSWORD_HASHERS = [\"django.contrib.auth.hashers.MD5PasswordHasher\"]\n# EMAIL\n# ------------------------------------------------------------------------------\n# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend\nEMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n# Your stuff...\n# ------------------------------------------------------------------------------",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.settings.test",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "peekOfCode": "app_name = \"api\"\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.api_router",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"API Documentation\",\n        default_version='v1',\n        description=\"API's description\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@deelop.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.swagger",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "peekOfCode": "urlpatterns = [\n                    # Django Admin, use {% url 'admin:index' %}\n                    path(settings.ADMIN_URL, admin.site.urls),\n                    re_path('^$', lambda request: redirect('swagger/', permanent=False)),\n                    path(\"api/\", include(\"pythondjangocrud.apps.events.urls\")),\n                    path('api/v1/', include(('pythondjangocrud.urls.apis', 'api'), namespace='api')),\n                    # Django Docs - Swagger\n                    url(r'^swagger(?P<format>.json|.yaml)$', schema_view.without_ui(cache_timeout=0),\n                        name='schema-json'),\n                    url(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.urls",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "peekOfCode": "ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent\nsys.path.append(str(ROOT_DIR / \"pythondjangocrud\"))\n# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks\n# if running multiple sites in the same mod_wsgi process. To fix this, use\n# mod_wsgi daemon mode with each site in its own daemon process, or use\n# os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"config.settings.production\"\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.production\")\n# This application object is used by any WSGI server configured to use this\n# file. This includes Django's development server, if the WSGI_APPLICATION\n# setting points here.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "peekOfCode": "application = get_wsgi_application()\n# Apply WSGI middleware here.\n# from helloworld.wsgi import HelloWorldApplication\n# application = HelloWorldApplication(application)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.config.wsgi",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DATABASE_URL\"]",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "os.environ[\"DATABASE_URL\"] = \"sqlite:///readthedocs.db\"\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings.local\")\ndjango.setup()\n# -- Project information -----------------------------------------------------\nproject = \"pythondjangocrud\"\ncopyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "project = \"pythondjangocrud\"\ncopyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "copyright = \"\"\"2022, Deelop\"\"\"\nauthor = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "author = \"Deelop\"\n# -- General configuration ---------------------------------------------------\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]\n# Add any paths that contain templates here, relative to this directory.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "extensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n]\n# Add any paths that contain templates here, relative to this directory.\n# templates_path = [\"_templates\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "exclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"alabaster\"\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n# html_static_path = [\"_static\"]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "peekOfCode": "html_theme = \"alabaster\"\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n# html_static_path = [\"_static\"]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.docs.conf",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('employee', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Attendance',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AttendanceAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "peekOfCode": "class AttendanceAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['employee_id','date','status']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.admin",
        "documentation": {}
    },
    {
        "label": "AttendanceConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "peekOfCode": "class AttendanceConfig(AppConfig):\n    name = \"pythondjangocrud.apps.attendance\"\n    verbose_name = _(\"Attendance\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.attendance.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.apps",
        "documentation": {}
    },
    {
        "label": "Attendance",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "peekOfCode": "class Attendance(AbstractChoice):\n    \"\"\"\n        Model Attendance\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    date = models.DateField(auto_now = False , auto_now_add = False)\n    status = models.TextField()\n    employee_id = models.ForeignKey(Employee, related_name=\"attendance\",\n      on_delete=models.SET_NULL, blank=True, null=True, default=None,)\n    class Meta:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.models",
        "documentation": {}
    },
    {
        "label": "AttendanceSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "peekOfCode": "class AttendanceSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer attendance\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Attendance",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "app_name = \"attendance\"\nrouter = DefaultRouter()\nrouter.register(r'attendance', AttendanceViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'attendance', AttendanceViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.urls",
        "documentation": {}
    },
    {
        "label": "AttendanceViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "peekOfCode": "class AttendanceViewSet(ModelViewSet):\n    \"\"\"\n        Viewset AttendanceViewSet\n    \"\"\"\n    queryset = Attendance.objects.actives()\n    serializer_class = AttendanceSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when an attendance record is created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.attendance.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Department',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DepartmentAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "peekOfCode": "class DepartmentAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['name','location']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.admin",
        "documentation": {}
    },
    {
        "label": "DepartmentConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "peekOfCode": "class DepartmentConfig(AppConfig):\n    name = \"pythondjangocrud.apps.department\"\n    verbose_name = _(\"Department\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.department.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.apps",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "peekOfCode": "class Department(AbstractChoice):\n    \"\"\"\n        Model Department\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    name = models.TextField()\n    location = models.TextField()\n    class Meta:\n        db_table = 'department'\n        verbose_name = _('department')",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.models",
        "documentation": {}
    },
    {
        "label": "DepartmentSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "peekOfCode": "class DepartmentSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer department\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Department",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "app_name = \"department\"\nrouter = DefaultRouter()\nrouter.register(r'department', DepartmentViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'department', DepartmentViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.urls",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "peekOfCode": "class DepartmentViewSet(ModelViewSet):\n    \"\"\"\n        Viewset DepartmentViewSet\n    \"\"\"\n    queryset = Department.objects.actives()\n    serializer_class = DepartmentSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a department record is created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.department.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Employee',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "EmployeeAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "peekOfCode": "class EmployeeAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['first_name','last_name','email','hire_date']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.admin",
        "documentation": {}
    },
    {
        "label": "EmployeeConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "peekOfCode": "class EmployeeConfig(AppConfig):\n    name = \"pythondjangocrud.apps.employee\"\n    verbose_name = _(\"Employee\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.employee.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.apps",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "peekOfCode": "class Employee(AbstractChoice):\n    \"\"\"\n        Model Employee\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    first_name = models.TextField()\n    last_name = models.TextField()\n    email = models.TextField()\n    hire_date = models.DateField(auto_now = False , auto_now_add = False)\n    class Meta:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.models",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "peekOfCode": "class EmployeeSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer employee\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Employee",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "app_name = \"employee\"\nrouter = DefaultRouter()\nrouter.register(r'employee', EmployeeViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'employee', EmployeeViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.urls",
        "documentation": {}
    },
    {
        "label": "EmployeeViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "peekOfCode": "class EmployeeViewSet(ModelViewSet):\n    \"\"\"\n        Viewset EmployeeViewSet\n    \"\"\"\n    queryset = Employee.objects.actives()\n    serializer_class = EmployeeSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when an employee record is created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.employee.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with initial data.\"\n    def handle(self, *args, **options):\n        reset_database()\n        self.stdout.write(self.style.SUCCESS(\"Database seeded successfully.\"))",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.management.commands.seed_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "EventsConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "peekOfCode": "class EventsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"pythondjangocrud.apps.events\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.apps",
        "documentation": {}
    },
    {
        "label": "EVENTS_ALLOWED",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "peekOfCode": "EVENTS_ALLOWED = [\n    \"attendance_create\",\n    \"attendance_update\",\n    \"attendance_delete\",\n    \"department_create\",\n    \"department_update\",\n    \"department_delete\",\n    \"employee_create\",\n    \"employee_update\",\n    \"employee_delete\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.events",
        "documentation": {}
    },
    {
        "label": "PageViewMiddleware",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "peekOfCode": "class PageViewMiddleware:\n    \"\"\"\n    Middleware to log page view events for all GET requests.\n    \"\"\"\n    IGNORED_PATHS = [\n        \"/favicon.ico\",  # Ignorar favicon\n        \"/favicon.png\",  # Variación adicional\n        \"/\"\n    ]\n    def __init__(self, get_response):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.middleware",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "peekOfCode": "class Event(models.Model):\n    EVENT_TYPES = [\n        ('attendance_create', 'Attendance Created'),\n        ('attendance_update', 'Attendance Updated'),\n        ('attendance_delete', 'Attendance Deleted'),\n        ('department_create', 'Department Created'),\n        ('department_update', 'Department Updated'),\n        ('department_delete', 'Department Deleted'),\n        ('employee_create', 'Employee Created'),\n        ('employee_update', 'Employee Updated'),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.models",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "peekOfCode": "def reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user\n    user, created = User.objects.get_or_create(\n        email=\"test@test.com\",\n        defaults={\n            \"is_staff\": True,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "documentation": {}
    },
    {
        "label": "base_dir",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "peekOfCode": "base_dir = Path(__file__).resolve().parent\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jobs.settings')\ndjango.setup()\nfrom pythondjangocrud.apps.users.models import User\ndef reset_database():\n    \"\"\"Reset the database state and re-seed with initial data.\"\"\"\n    # Clear the jobs table\n    Event.objects.all().delete()\n    print(\"All jobs deleted successfully.\")\n    # Get or create an admin user",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.reset_seed",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "peekOfCode": "class EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = '__all__'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"events/list/\", get_events, name=\"event-list\"),\n    path(\"events/my/\", my_events, name=\"my_events\"),\n    path(\"events/reset/\", reset_events, name=\"reset_events\"),\n    path(\"events/add/\", add_event, name=\"add_events\"),\n]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.urls",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "peekOfCode": "def create_event(user, event_type, description, data=None, web_agent_id=None):\n    \"\"\"\n    Create an event in the database.\n    Args:\n        user (User or None): The user associated with the event (can be None).\n        event_type (str): The type of the event (must be one of Event.EVENT_TYPES).\n        description (str): A brief description of the event.\n        data (dict, optional): Additional data to store with the event. Defaults to an empty dictionary.\n        web_agent_id (int, optional): The web_agent ID associated with the event. Defaults to None.\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.utils",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def get_events(request):\n    \"\"\"\n    Fetch events for the web_agent identified by the provided `web_agent_id`.\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")  # Retrieve web_agent_id from query params\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    events = Event.objects.filter(web_agent_id=web_agent_id).order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "my_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def my_events(request):\n    \"\"\"\n    Get all my events\n    \"\"\"\n    # user = request.user\n    # user_email = request.data.get(\"user_email\")\n    # user = User.objects.get(email=user_email)\n    events = Event.objects.order_by(\"-created_at\")\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "reset_events",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def reset_events(request):\n    \"\"\"\n    Delete Events\n    \"\"\"\n    web_agent_id = request.headers.get(\"X-WebAgent-Id\")\n    if not web_agent_id:\n        return Response({\"error\": \"X-WebAgent-Id is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n    Event.objects.filter(web_agent_id=web_agent_id).delete()\n    return Response(\n        {\"message\": f\"Events for web_agent '{web_agent_id}' have been deleted successfully.\"},",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "add_event",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "peekOfCode": "def add_event(request):\n    \"\"\"\n    Add a new event to the database.\n    Expected JSON payload:\n    {\n        \"web_agent_id\": \"example-webAgent-id\",\n        \"event_type\": \"example-event-type\",\n        \"event_data\": { ... }  # JSON object with event-specific data\n    }\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.events.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('employee', '__first__'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Payroll',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PayrollAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "peekOfCode": "class PayrollAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['employee_id','pay_date','amount']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.admin",
        "documentation": {}
    },
    {
        "label": "PayrollConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "peekOfCode": "class PayrollConfig(AppConfig):\n    name = \"pythondjangocrud.apps.payroll\"\n    verbose_name = _(\"Payroll\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.payroll.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.apps",
        "documentation": {}
    },
    {
        "label": "Payroll",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "peekOfCode": "class Payroll(AbstractChoice):\n    \"\"\"\n        Model Payroll\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    pay_date = models.DateField(auto_now = False , auto_now_add = False)\n    amount = models.FloatField()\n    employee_id = models.ForeignKey(Employee, related_name=\"payroll\",\n      on_delete=models.SET_NULL, blank=True, null=True, default=None,)\n    class Meta:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.models",
        "documentation": {}
    },
    {
        "label": "PayrollSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "peekOfCode": "class PayrollSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer payroll\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Payroll",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "app_name = \"payroll\"\nrouter = DefaultRouter()\nrouter.register(r'payroll', PayrollViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'payroll', PayrollViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.urls",
        "documentation": {}
    },
    {
        "label": "PayrollViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "peekOfCode": "class PayrollViewSet(ModelViewSet):\n    \"\"\"\n    Viewset for Payroll, with event logging for create, update, and delete.\n    \"\"\"\n    queryset = Payroll.objects.actives()\n    serializer_class = PayrollSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a payroll record is created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.payroll.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Position',\n            fields=[\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='record creation date', verbose_name='creation date')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PositionAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "peekOfCode": "class PositionAdmin(AuditAdminMixin, admin.ModelAdmin):\n    \"\"\"\n    Admin options for Learning model.\n    \"\"\"\n    list_display = ['title','salary']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.admin",
        "documentation": {}
    },
    {
        "label": "PositionConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "peekOfCode": "class PositionConfig(AppConfig):\n    name = \"pythondjangocrud.apps.position\"\n    verbose_name = _(\"Position\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.position.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.apps",
        "documentation": {}
    },
    {
        "label": "Position",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "peekOfCode": "class Position(AbstractChoice):\n    \"\"\"\n        Model Position\n    \"\"\"\n    id = models.BigAutoField(primary_key=True)\n    title = models.TextField()\n    salary = models.FloatField()\n    class Meta:\n        db_table = 'position'\n        verbose_name = _('position')",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.models",
        "documentation": {}
    },
    {
        "label": "PositionSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "peekOfCode": "class PositionSerializer(serializers.ModelSerializer):\n    \"\"\"\n        Serializer position\n    \"\"\"\n    class Meta(AuditSerializerMixin.Meta):\n        model = Position",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "app_name = \"position\"\nrouter = DefaultRouter()\nrouter.register(r'position', PositionViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'position', PositionViewSet)\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.urls",
        "documentation": {}
    },
    {
        "label": "PositionViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "peekOfCode": "class PositionViewSet(ModelViewSet):\n    \"\"\"\n        Viewset PositionViewSet\n    \"\"\"\n    queryset = Position.objects.actives()\n    serializer_class = PositionSerializer\n    permission_classes = (AllowAny,)\n    def perform_create(self, serializer):\n        \"\"\"\n        Override perform_create to log event when a position record is created.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.position.views",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"username\", \"name\", \"url\"]\n        extra_kwargs = {\n            \"url\": {\"view_name\": \"api:user-detail\", \"lookup_field\": \"username\"}\n        }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = [\"username\", \"name\", \"url\"]\n        extra_kwargs = {\n            \"url\": {\"view_name\": \"api:user-detail\", \"lookup_field\": \"username\"}\n        }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "peekOfCode": "class UserViewSet(RetrieveModelMixin, ListModelMixin, UpdateModelMixin, GenericViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    lookup_field = \"username\"\n    def get_queryset(self, *args, **kwargs):\n        assert isinstance(self.request.user.id, int)\n        return self.queryset.filter(id=self.request.user.id)\n    @action(detail=False)\n    def me(self, request):\n        serializer = UserSerializer(request.user, context={\"request\": request})",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "peekOfCode": "User = get_user_model()\nclass UserViewSet(RetrieveModelMixin, ListModelMixin, UpdateModelMixin, GenericViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    lookup_field = \"username\"\n    def get_queryset(self, *args, **kwargs):\n        assert isinstance(self.request.user.id, int)\n        return self.queryset.filter(id=self.request.user.id)\n    @action(detail=False)\n    def me(self, request):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserFactory",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "peekOfCode": "class UserFactory(DjangoModelFactory):\n    username = Faker(\"user_name\")\n    email = Faker(\"email\")\n    name = Faker(\"name\")\n    @post_generation\n    def password(self, create: bool, extracted: Sequence[Any], **kwargs):\n        password = (\n            extracted\n            if extracted\n            else Faker(",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.factories",
        "documentation": {}
    },
    {
        "label": "TestUserAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "peekOfCode": "class TestUserAdmin:\n    def test_changelist(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url)\n        assert response.status_code == 200\n    def test_search(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url, data={\"q\": \"test\"})\n        assert response.status_code == 200\n    def test_add(self, admin_client):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserAdmin:\n    def test_changelist(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url)\n        assert response.status_code == 200\n    def test_search(self, admin_client):\n        url = reverse(\"admin:users_user_changelist\")\n        response = admin_client.get(url, data={\"q\": \"test\"})\n        assert response.status_code == 200",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "test_user_detail",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_detail(user: User):\n    assert (\n        reverse(\"api:user-detail\", kwargs={\"username\": user.username})\n        == f\"/api/users/{user.username}/\"\n    )\n    assert resolve(f\"/api/users/{user.username}/\").view_name == \"api:user-detail\"\ndef test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"\ndef test_user_me():",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "test_user_list",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"\ndef test_user_me():\n    assert reverse(\"api:user-me\") == \"/api/users/me/\"\n    assert resolve(\"/api/users/me/\").view_name == \"api:user-me\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "test_user_me",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "def test_user_me():\n    assert reverse(\"api:user-me\") == \"/api/users/me/\"\n    assert resolve(\"/api/users/me/\").view_name == \"api:user-me\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_user_detail(user: User):\n    assert (\n        reverse(\"api:user-detail\", kwargs={\"username\": user.username})\n        == f\"/api/users/{user.username}/\"\n    )\n    assert resolve(f\"/api/users/{user.username}/\").view_name == \"api:user-detail\"\ndef test_user_list():\n    assert reverse(\"api:user-list\") == \"/api/users/\"\n    assert resolve(\"/api/users/\").view_name == \"api:user-list\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_urls",
        "documentation": {}
    },
    {
        "label": "TestUserViewSet",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "peekOfCode": "class TestUserViewSet:\n    def test_get_queryset(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")\n        request.user = user\n        view.request = request\n        assert user in view.get_queryset()\n    def test_me(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserViewSet:\n    def test_get_queryset(self, user: User, rf: RequestFactory):\n        view = UserViewSet()\n        request = rf.get(\"/fake-url/\")\n        request.user = user\n        view.request = request\n        assert user in view.get_queryset()\n    def test_me(self, user: User, rf: RequestFactory):\n        view = UserViewSet()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_drf_views",
        "documentation": {}
    },
    {
        "label": "TestUserAdminCreationForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "peekOfCode": "class TestUserAdminCreationForm:\n    \"\"\"\n    Test class for all tests related to the UserAdminCreationForm\n    \"\"\"\n    def test_username_validation_error_msg(self, user: User):\n        \"\"\"\n        Tests UserAdminCreation Form's unique validator functions correctly by testing:\n            1) A new user with an existing username cannot be added.\n            2) Only 1 error is raised by the UserCreation Form\n            3) The desired error message is raised",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserAdminCreationForm:\n    \"\"\"\n    Test class for all tests related to the UserAdminCreationForm\n    \"\"\"\n    def test_username_validation_error_msg(self, user: User):\n        \"\"\"\n        Tests UserAdminCreation Form's unique validator functions correctly by testing:\n            1) A new user with an existing username cannot be added.\n            2) Only 1 error is raised by the UserCreation Form",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "test_user_get_absolute_url",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "peekOfCode": "def test_user_get_absolute_url(user: User):\n    assert user.get_absolute_url() == f\"/users/{user.username}/\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_user_get_absolute_url(user: User):\n    assert user.get_absolute_url() == f\"/users/{user.username}/\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_swagger_accessible_by_admin",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_swagger_accessible_by_admin(admin_client):\n    url = reverse(\"api-docs\")\n    response = admin_client.get(url)\n    assert response.status_code == 200\ndef test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_swagger_ui_not_accessible_by_normal_user",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")\n    response = admin_client.get(url)\n    assert response.status_code == 200",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_api_schema_generated_successfully",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "def test_api_schema_generated_successfully(admin_client):\n    url = reverse(\"api-schema\")\n    response = admin_client.get(url)\n    assert response.status_code == 200",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_swagger_accessible_by_admin(admin_client):\n    url = reverse(\"api-docs\")\n    response = admin_client.get(url)\n    assert response.status_code == 200\ndef test_swagger_ui_not_accessible_by_normal_user(client):\n    url = reverse(\"api-docs\")\n    response = client.get(url)\n    assert response.status_code == 403\ndef test_api_schema_generated_successfully(admin_client):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_swagger",
        "documentation": {}
    },
    {
        "label": "test_detail",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_detail(user: User):\n    assert (\n        reverse(\"users:detail\", kwargs={\"username\": user.username})\n        == f\"/users/{user.username}/\"\n    )\n    assert resolve(f\"/users/{user.username}/\").view_name == \"users:detail\"\ndef test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"\ndef test_redirect():",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "test_update",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"\ndef test_redirect():\n    assert reverse(\"users:redirect\") == \"/users/~redirect/\"\n    assert resolve(\"/users/~redirect/\").view_name == \"users:redirect\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "test_redirect",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "def test_redirect():\n    assert reverse(\"users:redirect\") == \"/users/~redirect/\"\n    assert resolve(\"/users/~redirect/\").view_name == \"users:redirect\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "peekOfCode": "pytestmark = pytest.mark.django_db\ndef test_detail(user: User):\n    assert (\n        reverse(\"users:detail\", kwargs={\"username\": user.username})\n        == f\"/users/{user.username}/\"\n    )\n    assert resolve(f\"/users/{user.username}/\").view_name == \"users:detail\"\ndef test_update():\n    assert reverse(\"users:update\") == \"/users/~update/\"\n    assert resolve(\"/users/~update/\").view_name == \"users:update\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_urls",
        "documentation": {}
    },
    {
        "label": "TestUserUpdateView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserUpdateView:\n    \"\"\"\n    TODO:\n        extracting view initialization code as class-scoped fixture\n        would be great if only pytest-django supported non-function-scoped\n        fixture db access -- this is a work-in-progress for now:\n        https://github.com/pytest-dev/pytest-django/pull/258\n    \"\"\"\n    def dummy_get_response(self, request: HttpRequest):\n        return None",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestUserRedirectView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserRedirectView:\n    def test_get_redirect_url(self, user: User, rf: RequestFactory):\n        view = UserRedirectView()\n        request = rf.get(\"/fake-url\")\n        request.user = user\n        view.request = request\n        assert view.get_redirect_url() == f\"/users/{user.username}/\"\nclass TestUserDetailView:\n    def test_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestUserDetailView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "class TestUserDetailView:\n    def test_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")\n        request.user = UserFactory()\n        response = user_detail_view(request, username=user.username)\n        assert response.status_code == 200\n    def test_not_authenticated(self, user: User, rf: RequestFactory):\n        request = rf.get(\"/fake-url/\")\n        request.user = AnonymousUser()\n        response = user_detail_view(request, username=user.username)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "peekOfCode": "pytestmark = pytest.mark.django_db\nclass TestUserUpdateView:\n    \"\"\"\n    TODO:\n        extracting view initialization code as class-scoped fixture\n        would be great if only pytest-django supported non-function-scoped\n        fixture db access -- this is a work-in-progress for now:\n        https://github.com/pytest-dev/pytest-django/pull/258\n    \"\"\"\n    def dummy_get_response(self, request: HttpRequest):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AccountAdapter",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "peekOfCode": "class AccountAdapter(DefaultAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)\nclass SocialAccountAdapter(DefaultSocialAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest, sociallogin: Any):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "documentation": {}
    },
    {
        "label": "SocialAccountAdapter",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "peekOfCode": "class SocialAccountAdapter(DefaultSocialAccountAdapter):\n    def is_open_for_signup(self, request: HttpRequest, sociallogin: Any):\n        return getattr(settings, \"ACCOUNT_ALLOW_REGISTRATION\", True)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.adapters",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "peekOfCode": "class UserAdmin(auth_admin.UserAdmin):\n    form = UserAdminChangeForm\n    add_form = UserAdminCreationForm\n    fieldsets = (\n        (None, {\"fields\": (\"username\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\", \"email\")}),\n        (\n            _(\"Permissions\"),\n            {\n                \"fields\": (",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "peekOfCode": "User = get_user_model()\n@admin.register(User)\nclass UserAdmin(auth_admin.UserAdmin):\n    form = UserAdminChangeForm\n    add_form = UserAdminCreationForm\n    fieldsets = (\n        (None, {\"fields\": (\"username\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\", \"email\")}),\n        (\n            _(\"Permissions\"),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    name = \"pythondjangocrud.apps.users\"\n    verbose_name = _(\"Users\")\n    def ready(self):\n        try:\n            import pythondjangocrud.apps.users.signals  # noqa F401\n        except ImportError:\n            pass",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.apps",
        "documentation": {}
    },
    {
        "label": "allauth_settings",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "peekOfCode": "def allauth_settings(request):\n    \"\"\"Expose some settings from django-allauth in templates.\"\"\"\n    return {\n        \"ACCOUNT_ALLOW_REGISTRATION\": settings.ACCOUNT_ALLOW_REGISTRATION,\n    }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.context_processors",
        "documentation": {}
    },
    {
        "label": "UserAdminChangeForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserAdminChangeForm(admin_forms.UserChangeForm):\n    class Meta(admin_forms.UserChangeForm.Meta):\n        model = User\nclass UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):\n        model = User",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserAdminCreationForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):\n        model = User\n        error_messages = {\n            \"username\": {\"unique\": _(\"This username has already been taken.\")}\n        }",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserSignupForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserSignupForm(SignupForm):\n    \"\"\"\n    Form that will be rendered on a user sign up section/screen.\n    Default fields will be added automatically.\n    Check UserSocialSignupForm for accounts created from social.\n    \"\"\"\nclass UserSocialSignupForm(SocialSignupForm):\n    \"\"\"\n    Renders the form when user has signed up using social accounts.\n    Default fields will be added automatically.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "UserSocialSignupForm",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "class UserSocialSignupForm(SocialSignupForm):\n    \"\"\"\n    Renders the form when user has signed up using social accounts.\n    Default fields will be added automatically.\n    See UserSignupForm otherwise.\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "peekOfCode": "User = get_user_model()\nclass UserAdminChangeForm(admin_forms.UserChangeForm):\n    class Meta(admin_forms.UserChangeForm.Meta):\n        model = User\nclass UserAdminCreationForm(admin_forms.UserCreationForm):\n    \"\"\"\n    Form for User Creation in the Admin Area.\n    To change user signup, see UserSignupForm and UserSocialSignupForm.\n    \"\"\"\n    class Meta(admin_forms.UserCreationForm.Meta):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "peekOfCode": "class User(AbstractUser):\n    \"\"\"\n    Default custom user model for pythondjangocrud.\n    If adding fields that need to be filled at user signup,\n    check forms.SignupForm and forms.SocialSignupForms accordingly.\n    \"\"\"\n    #: First and last name do not cover name patterns around the globe\n    name = CharField(_(\"Name of User\"), blank=True, max_length=255)\n    first_name = None  # type: ignore\n    last_name = None  # type: ignore",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "app_name = \"users\"\nrouter = DefaultRouter()\nrouter.register(r'users', user_views.UserViewSet, basename='users')\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', user_views.UserViewSet, basename='users')\nurlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.urls",
        "documentation": {}
    },
    {
        "label": "UserDetailView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserDetailView(LoginRequiredMixin, DetailView):\n    model = User\n    slug_field = \"username\"\n    slug_url_kwarg = \"username\"\n    def get(self, request, *args, **kwargs):\n        # Log the event when the user views their profile\n        create_event(\n            user=request.user,\n            event_type='user_view',\n            description=f'User {request.user.username} viewed their profile',",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    fields = [\"name\"]\n    success_message = _(\"Information successfully updated\")\n    def get_success_url(self):\n        assert (\n            self.request.user.is_authenticated\n        )  # for mypy to know that the user is authenticated\n        return self.request.user.get_absolute_url()\n    def get_object(self):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "UserRedirectView",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "class UserRedirectView(LoginRequiredMixin, RedirectView):\n    permanent = False\n    def get_redirect_url(self):\n        # Log the event when the user is redirected\n        create_event(\n            user=self.request.user,\n            event_type='user_redirect',\n            description=f'User {self.request.user.username} was redirected to their profile',\n            data={'username': self.request.user.username},\n            miner_id=self.request.headers.get(\"X-Miner-Id\", None)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "User = get_user_model()\nclass UserDetailView(LoginRequiredMixin, DetailView):\n    model = User\n    slug_field = \"username\"\n    slug_url_kwarg = \"username\"\n    def get(self, request, *args, **kwargs):\n        # Log the event when the user views their profile\n        create_event(\n            user=request.user,\n            event_type='user_view',",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_detail_view",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_detail_view = UserDetailView.as_view()\nclass UserUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = User\n    fields = [\"name\"]\n    success_message = _(\"Information successfully updated\")\n    def get_success_url(self):\n        assert (\n            self.request.user.is_authenticated\n        )  # for mypy to know that the user is authenticated\n        return self.request.user.get_absolute_url()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_update_view",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_update_view = UserUpdateView.as_view()\nclass UserRedirectView(LoginRequiredMixin, RedirectView):\n    permanent = False\n    def get_redirect_url(self):\n        # Log the event when the user is redirected\n        create_event(\n            user=self.request.user,\n            event_type='user_redirect',\n            description=f'User {self.request.user.username} was redirected to their profile',\n            data={'username': self.request.user.username},",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "user_redirect_view",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "peekOfCode": "user_redirect_view = UserRedirectView.as_view()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.apps.users.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Site\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        verbose_name=\"ID\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"sites\", \"0001_initial\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"site\",\n            name=\"domain\",\n            field=models.CharField(\n                max_length=100,\n                unique=True,\n                validators=[django.contrib.sites.models._simple_domain_name_validator],",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0002_alter_domain_unique",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"sites\", \"0002_alter_domain_unique\")]\n    operations = [migrations.RunPython(update_site_forward, update_site_backward)]",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "update_site_forward",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "def update_site_forward(apps, schema_editor):\n    \"\"\"Set site domain and name.\"\"\"\n    Site = apps.get_model(\"sites\", \"Site\")\n    _update_or_create_site_with_sequence(\n        Site,\n        schema_editor.connection,\n        \"deelop.com\",\n        \"pythondjangocrud\",\n    )\ndef update_site_backward(apps, schema_editor):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "update_site_backward",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "peekOfCode": "def update_site_backward(apps, schema_editor):\n    \"\"\"Revert site domain and name to default.\"\"\"\n    Site = apps.get_model(\"sites\", \"Site\")\n    _update_or_create_site_with_sequence(\n        Site,\n        schema_editor.connection,\n        \"example.com\",\n        \"example.com\",\n    )\nclass Migration(migrations.Migration):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0003_set_site_domain_and_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"sites\", \"0003_set_site_domain_and_name\"),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"site\",\n            options={\n                \"ordering\": [\"domain\"],\n                \"verbose_name\": \"site\",",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.contrib.sites.migrations.0004_alter_options_ordering_domain",
        "documentation": {}
    },
    {
        "label": "CoreManager",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "peekOfCode": "class CoreManager(models.Manager):\n    def actives(self):\n        return super(CoreManager, self).get_queryset().filter(is_active=True)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.managers",
        "documentation": {}
    },
    {
        "label": "AbstractAudit",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractAudit(models.Model):\n    \"\"\"\n    An abstract model that manages the modifications made to a model\n    \"\"\"\n    is_active = models.BooleanField(\n        _('active'),\n        default=True,\n        help_text=_(\n            'Designates whether this record should be treated as active. '\n            'Unselect this instead of deleting accounts.'",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoice",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractChoice(AbstractAudit):\n    \"\"\"\n    An abstract model for and id and name entry (i.e. field).\n    \"\"\"\n    name = models.CharField(\n        _('name'),\n        max_length=200,\n        blank=True,\n        null=True,\n        default=None,",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractAttachment",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "peekOfCode": "class AbstractAttachment(AbstractAudit):\n    title = models.CharField(max_length=90, null=True, blank=True)\n    category = models.CharField(max_length=90, null=True, blank=True)\n    description = models.CharField(max_length=90, null=True, blank=True)\n    class Meta:\n        abstract = True\n    def __str__(self):\n        return \"{} - {}\".format(self.id, self.title)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.models.models",
        "documentation": {}
    },
    {
        "label": "AbstractChoiceAdmin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "peekOfCode": "class AbstractChoiceAdmin(admin.ModelAdmin):\n    \"\"\"\n    Admin options for AbstractChoice abstract model.\n    \"\"\"\n    list_display = ['id', 'name', 'code']\nclass AuditAdminMixin:\n    ordering = ['pk']\n    def get_merge_fields(self, origin_fields, fields):\n        fields = list(fields)\n        for field in origin_fields:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "AuditAdminMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "peekOfCode": "class AuditAdminMixin:\n    ordering = ['pk']\n    def get_merge_fields(self, origin_fields, fields):\n        fields = list(fields)\n        for field in origin_fields:\n            if field not in fields:\n                fields.append(field)\n        return fields\n    def get_all_fields(self, fields):\n        audit_fields = ['is_active', 'creation_date', 'created_by', 'update_date', 'update_by']",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.admin",
        "documentation": {}
    },
    {
        "label": "RatingTypeEnum",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "peekOfCode": "class RatingTypeEnum(IntEnum):\n    \"\"\" Enum Rating Type \"\"\"\n    RATING_1 = 1\n    RATING_2 = 2\n    RATING_3 = 3\n    RATING_4 = 4\n    RATING_5 = 5",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.constants",
        "documentation": {}
    },
    {
        "label": "PostFilterType",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class PostFilterType(IntEnum):\n    LIST_ALL = 1\nclass FilterFieldsMixin(GenericAPIView):\n    \"\"\"\n    Mixin to filter queryset.\n    \"\"\"\n    ignore_fields = ['limit', 'offset', 'ordering']\n    filterset_fields = []\n    text_filter_fields = []\n    list_filter_fields = []",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "FilterFieldsMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class FilterFieldsMixin(GenericAPIView):\n    \"\"\"\n    Mixin to filter queryset.\n    \"\"\"\n    ignore_fields = ['limit', 'offset', 'ordering']\n    filterset_fields = []\n    text_filter_fields = []\n    list_filter_fields = []\n    list_all_filter_fields = []\n    alias_filter_fields = {}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "FilterByKwargFieldMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class FilterByKwargFieldMixin:\n    kwargs_fields = []\n    def filter_queryset(self, queryset):\n        queryset = super(FilterByKwargFieldMixin, self).filter_queryset(queryset)\n        filter_fields = dict()\n        for kwarg_name, filter_name in self.kwargs_fields:\n            kwarg_value = self.kwargs.get(kwarg_name, None)\n            if kwarg_value:\n                filter_fields[filter_name] = kwarg_value\n        if filter_fields:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "SerializerSetMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "peekOfCode": "class SerializerSetMixin(object):\n    serializer_class = None\n    min_serializer = None\n    list_serializer = None\n    detail_serializer = None\n    create_serializer = None\n    update_serializer = None\n    def get_serializer_class(self):\n        action = getattr(self, 'action', 'list')\n        if action in ('list',):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.filters",
        "documentation": {}
    },
    {
        "label": "AuditSerializerMixin",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "peekOfCode": "class AuditSerializerMixin:\n    \"\"\"\n    Mixin that excludes the audit fields from serializers.\n    \"\"\"\n    class Meta:\n        exclude = ['creation_date', 'created_by', 'update_date', 'update_by']\nclass AbstractChoiceSerializer(serializers.Serializer):\n    \"\"\"\n    ListSerializer for AbstractChoice model.\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "documentation": {}
    },
    {
        "label": "AbstractChoiceSerializer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "peekOfCode": "class AbstractChoiceSerializer(serializers.Serializer):\n    \"\"\"\n    ListSerializer for AbstractChoice model.\n    \"\"\"\n    id = serializers.IntegerField(allow_null=True)\n    name = serializers.CharField()\n    code = serializers.CharField(allow_null=True)\n    is_active = serializers.BooleanField(allow_null=True)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.serializers",
        "documentation": {}
    },
    {
        "label": "date_range",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def date_range(start_date: date, end_date: date):\n    for n in range(int((end_date - start_date).days) + 1):\n        yield start_date + timedelta(n)\ndef str_to_datetime(date_time_str, format='%Y-%m-%d %H:%M:%S.%f', default=datetime.now()):\n    \"\"\" Conviente de str a datetime desde un formato o retorna default\n    :param date_time_str: String que se dese convertir\n    :param format: Formato del string\n    :param default: En caso el formato no corresponda\n    :return: datetime\n    \"\"\"",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "str_to_datetime",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def str_to_datetime(date_time_str, format='%Y-%m-%d %H:%M:%S.%f', default=datetime.now()):\n    \"\"\" Conviente de str a datetime desde un formato o retorna default\n    :param date_time_str: String que se dese convertir\n    :param format: Formato del string\n    :param default: En caso el formato no corresponda\n    :return: datetime\n    \"\"\"\n    try:\n        date_time_obj = datetime.strptime(date_time_str, format)\n    except (ValueError, TypeError, Exception):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_str",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def camel_to_snake_str(camel_str):\n    upper_snake_str = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', camel_str)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', upper_snake_str).lower()\ndef camel_to_snake_object_keys(obj):\n    return dict([(camel_to_snake_str(key), obj.get(key, None)) for key in obj.keys()])\ndef choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "camel_to_snake_object_keys",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def camel_to_snake_object_keys(obj):\n    return dict([(camel_to_snake_str(key), obj.get(key, None)) for key in obj.keys()])\ndef choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "choices_to_list",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def choices_to_list(choices):\n    return [{'id': id, 'name': name} for (id, name) in choices]\ndef named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])\n    return [nt_result(*row) for row in cursor.fetchall()]\ndef try_or(item, keys, default):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "named_tuple_fetch_all",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def named_tuple_fetch_all(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple('Result', [col[0] for col in desc])\n    return [nt_result(*row) for row in cursor.fetchall()]\ndef try_or(item, keys, default):\n    temp = item\n    try:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "try_or",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def try_or(item, keys, default):\n    temp = item\n    try:\n        for key in keys:\n            temp = temp.get(key)\n        return temp or default\n    except:\n        return default\ndef group_days(total_days):\n    YEAR = 365",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "group_days",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "peekOfCode": "def group_days(total_days):\n    YEAR = 365\n    MONTH = 30\n    years = int(total_days / YEAR)\n    months = int((total_days % YEAR) / MONTH)\n    days = (total_days % YEAR) % MONTH\n    return years, months, days",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.core.utils",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "router = DefaultRouter()\napp_name = \"api\"\nurlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "app_name = \"api\"\nurlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT\n    path('auth/token-auth/', obtain_jwt_token),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "peekOfCode": "urlpatterns = [\n    path('', include(('pythondjangocrud.apps.users.urls', 'users'), namespace='users')),\n    path('', include(('pythondjangocrud.apps.employee.urls', 'employee'), namespace='employee')),\n    path('', include(('pythondjangocrud.apps.department.urls', 'department'), namespace='department')),\n    path('', include(('pythondjangocrud.apps.position.urls', 'position'), namespace='position')),\n    path('', include(('pythondjangocrud.apps.attendance.urls', 'attendance'), namespace='attendance')),\n    path('', include(('pythondjangocrud.apps.payroll.urls', 'payroll'), namespace='payroll')),\n    # Urls JWT\n    path('auth/token-auth/', obtain_jwt_token),\n    path('auth/token-refresh/', refresh_jwt_token),",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.urls.apis",
        "documentation": {}
    },
    {
        "label": "StaticRootS3Boto3Storage",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "peekOfCode": "class StaticRootS3Boto3Storage(S3Boto3Storage):\n    location = \"static\"\n    default_acl = \"public-read\"\nclass MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"\n    file_overwrite = False",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "documentation": {}
    },
    {
        "label": "MediaRootS3Boto3Storage",
        "kind": 6,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "peekOfCode": "class MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"\n    file_overwrite = False",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.utils.storages",
        "documentation": {}
    },
    {
        "label": "media_storage",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "peekOfCode": "def media_storage(settings, tmpdir):\n    settings.MEDIA_ROOT = tmpdir.strpath\n@pytest.fixture\ndef user() -> User:\n    return UserFactory()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "peekOfCode": "def user() -> User:\n    return UserFactory()",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.pythondjangocrud.conftest",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:\n            with open(merged_file_path, \"r\") as merged_file:\n                merged_file_content = merged_file.read()\n                output_file.write(merged_file_content)\n                if append_linesep:\n                    output_file.write(os.linesep)",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def main():\n    merge(DOTENV_FILE_PATH, PRODUCTION_DOTENV_FILE_PATHS)\n@pytest.mark.parametrize(\"merged_file_count\", range(3))\n@pytest.mark.parametrize(\"append_linesep\", [True, False])\ndef test_merge(tmpdir_factory, merged_file_count: int, append_linesep: bool):\n    tmp_dir_path = Path(str(tmpdir_factory.getbasetemp()))\n    output_file_path = tmp_dir_path / \".env\"\n    expected_output_file_content = \"\"\n    merged_file_paths = []\n    for i in range(merged_file_count):",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "test_merge",
        "kind": 2,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "def test_merge(tmpdir_factory, merged_file_count: int, append_linesep: bool):\n    tmp_dir_path = Path(str(tmpdir_factory.getbasetemp()))\n    output_file_path = tmp_dir_path / \".env\"\n    expected_output_file_content = \"\"\n    merged_file_paths = []\n    for i in range(merged_file_count):\n        merged_file_ord = i + 1\n        merged_filename = \".service{}\".format(merged_file_ord)\n        merged_file_path = tmp_dir_path / merged_filename\n        merged_file_content = merged_filename * merged_file_ord",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "ROOT_DIR_PATH = Path(__file__).parent.resolve()\nPRODUCTION_DOTENVS_DIR_PATH = ROOT_DIR_PATH / \".envs\" / \".production\"\nPRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "PRODUCTION_DOTENVS_DIR_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "PRODUCTION_DOTENVS_DIR_PATH = ROOT_DIR_PATH / \".envs\" / \".production\"\nPRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "PRODUCTION_DOTENV_FILE_PATHS",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "PRODUCTION_DOTENV_FILE_PATHS = [\n    PRODUCTION_DOTENVS_DIR_PATH / \".django\",\n    PRODUCTION_DOTENVS_DIR_PATH / \".postgres\",\n]\nDOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "DOTENV_FILE_PATH",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "peekOfCode": "DOTENV_FILE_PATH = ROOT_DIR_PATH / \".env\"\ndef merge(\n    output_file_path: str, merged_file_paths: Sequence[str], append_linesep: bool = True\n) -> None:\n    with open(output_file_path, \"w\") as output_file:\n        for merged_file_path in merged_file_paths:\n            with open(merged_file_path, \"r\") as merged_file:\n                merged_file_content = merged_file.read()\n                output_file.write(merged_file_content)\n                if append_linesep:",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.backend.merge_production_dotenvs_in_dotenv",
        "documentation": {}
    },
    {
        "label": "DEMO_WEB_PROJECT_CONFIG",
        "kind": 5,
        "importPath": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "description": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "peekOfCode": "DEMO_WEB_PROJECT_CONFIG = {\n    \"name\" : \"Personal Management\",\n    \"events\" : EVENTS_ALLOWED\n}",
        "detail": "autoppia_iwa_module.modules.webs_demo.web_2_demo_angular_django_personal_management.config",
        "documentation": {}
    },
    {
        "label": "TestActionsGenerationAndEvaluation",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "description": "autoppia_iwa_module.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "peekOfCode": "class TestActionsGenerationAndEvaluation(unittest.TestCase):\n    \"\"\"\n    Unit tests for action generation and evaluation.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for the test class.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa_module.tests.data_generation.task_execution_and_evaluation.test_execute_one_task",
        "documentation": {}
    },
    {
        "label": "TestNewActionsGeneration",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "description": "autoppia_iwa_module.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "peekOfCode": "class TestNewActionsGeneration(unittest.TestCase):\n    \"\"\"\n    Unit tests for generating new actions based on task configurations.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Set up shared resources for all tests in the class.\n        \"\"\"\n        # Initialize the application bootstrap and LLM service",
        "detail": "autoppia_iwa_module.tests.data_generation.test_actions.test_actions_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByEasyDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "peekOfCode": "class TaskGenerationByEasyDifficultyTest(unittest.TestCase):\n    logger = logging.getLogger(\"TaskGenerationByEasyDifficultyTest\")\n    logger.setLevel(logging.INFO)\n    logging.basicConfig(format=\"%(levelname)s - %(message)s\", level=logging.INFO)\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.easy_tasks",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByHardDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "peekOfCode": "class TaskGenerationByHardDifficultyTest(unittest.TestCase):\n    logger = logging.getLogger(\"TaskGenerationByEasyDifficultyTest\")\n    logger.setLevel(logging.INFO)\n    logging.basicConfig(format=\"%(levelname)s - %(message)s\", level=logging.INFO)\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.hard_tasks",
        "documentation": {}
    },
    {
        "label": "TaskGenerationByMediumDifficultyTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "peekOfCode": "class TaskGenerationByMediumDifficultyTest(unittest.TestCase):\n    logger = logging.getLogger(\"TaskGenerationByEasyDifficultyTest\")\n    logger.setLevel(logging.INFO)\n    logging.basicConfig(format=\"%(levelname)s - %(message)s\", level=logging.INFO)\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Initialize dependencies and prepare output directory.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.depending_task_diffulty.medium_tasks",
        "documentation": {}
    },
    {
        "label": "TestTaskPromptGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "peekOfCode": "class TestTaskPromptGenerator(unittest.TestCase):\n    \"\"\"Unit tests for TaskPromptGenerator.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up shared test dependencies for all tests.\"\"\"\n        cls.app_boostrap = AppBootstrap()\n        cls.domain = \"localhost:8000\"\n        cls.test_data = cls._get_mock_web_analysis()\n        cls.web_analysis = DomainAnalysis(**cls.test_data)\n        cls.llm_service = cls.app_boostrap.container.llm_service()",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_prompt_generation.test_prompt_generator",
        "documentation": {}
    },
    {
        "label": "TestJudgeBaseOnHTML",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_html_test",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_html_test",
        "peekOfCode": "class TestJudgeBaseOnHTML(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Initialize JudgeBaseOnHTML with the real LLM service.\"\"\"\n        cls.llm_service = AppBootstrap().container.llm_service()\n        cls.test_instance = JudgeBaseOnHTML(llm_service=cls.llm_service)\n    def test_html_change_detected(self):\n        \"\"\"Test when LLM determines the task is completed based on HTML changes.\"\"\"\n        test_snapshot = BrowserSnapshot(\n            iteration=1,",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_html_test",
        "documentation": {}
    },
    {
        "label": "TestJudgeBaseOnScreenshot",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_screenshot_test",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_screenshot_test",
        "peekOfCode": "class TestJudgeBaseOnScreenshot(unittest.TestCase):\n    def setUp(self):\n        self.llm_service = OpenAIService(api_key=OPENAI_API_KEY, model=OPENAI_MODEL)\n        self.test_instance = JudgeBaseOnScreenshot(task=\"Verify button click effect\", llm_service=self.llm_service)\n        # Create black and white blocks\n        black_block_base64 = self.create_base64_encoded_block((0, 0, 0))\n        white_block_base64 = self.create_base64_encoded_block((255, 255, 255))\n        self.mock_snapshot = BrowserSnapshot(\n            iteration=1,\n            action=ClickAction(selector=Selector(type=\"xpathSelector\", value=\"//button[text()='Click Me']\")),",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.llm_screenshot_test",
        "documentation": {}
    },
    {
        "label": "TestHtmlModelDump",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_html_model_dump",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_html_model_dump",
        "peekOfCode": "class TestHtmlModelDump(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Initialize resources for the test class.\"\"\"\n        cls.app = AppBootstrap()\n        cls.llm_service = cls.app.container.llm_service()\n        cls.test_snapshot = BrowserSnapshot(\n            iteration=1,\n            action=ClickAction(selector=Selector(type=\"xpathSelector\", value=\"//button[text()='Click Me']\")),\n            prev_html=\"<div><button>Click Me</button></div>\",",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_html_model_dump",
        "documentation": {}
    },
    {
        "label": "TestAssignTests",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_task_tests_reassignment",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_task_tests_reassignment",
        "peekOfCode": "class TestAssignTests(unittest.TestCase):\n    def test_assign_tests_valid_configs(self):\n        \"\"\"\n        Test that `assign_tests` correctly instantiates the appropriate test classes\n        based on valid configurations.\n        \"\"\"\n        test_configs = [\n            {\"test_type\": \"frontend\", \"keywords\": [\"example\"]},\n            {\"test_type\": \"frontend\", \"name\": \"JudgeBaseOnHTML\"},\n            {\"test_type\": \"frontend\", \"name\": \"JudgeBaseOnScreenshot\", \"task\": \"example task\"},",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_task_tests_reassignment",
        "documentation": {}
    },
    {
        "label": "TestTaskTestGenerationWithWebAnalysis",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "peekOfCode": "class TestTaskTestGenerationWithWebAnalysis(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls) -> None:\n        \"\"\"\n        Set up class-level test environment.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.analysis_repo = cls.app_bootstrap.container.analysis_repository()\n        cls.llm_service = cls.app_bootstrap.container.llm_service()\n        # Local testing setup",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_task_test_generation.test_tests_generator",
        "documentation": {}
    },
    {
        "label": "TestTaskGenerationPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "description": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "peekOfCode": "class TestTaskGenerationPipeline(unittest.TestCase):\n    \"\"\"\n    Unit tests for the TaskGenerationPipeline.\n    Ensures the pipeline generates structured tasks based on the provided input.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls) -> None:\n        \"\"\"\n        Set up the environment and dependencies once for all tests.\n        \"\"\"",
        "detail": "autoppia_iwa_module.tests.data_generation.test_generation_pipeline.test_complete_task_generation_pipeline",
        "documentation": {}
    },
    {
        "label": "StressTestDataGenerator",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.evaluation.data_generator_and_tester",
        "description": "autoppia_iwa_module.tests.evaluation.data_generator_and_tester",
        "peekOfCode": "class StressTestDataGenerator(unittest.TestCase):\n    OUTPUT_FILE_256 = \"actions_data.json\"\n    OUTPUT_FILE_GROUPED = \"grouped_actions.json\"\n    RESULT_FILE_256 = \"hard_tasks.json\"\n    RESULT_FILE_GROUPED = \"grouped_tasks.json\"\n    @classmethod\n    def setUpClass(cls) -> None:\n        cls.EVALUATION_DIR = Path(__file__).parent.resolve()\n        cls.task_data_template = {\n            \"prompt\": \"Click on the \\\"Login\\\" link in the header. Then fill the form with email:employee@employee.com and password:employee and click on login\",",
        "detail": "autoppia_iwa_module.tests.evaluation.data_generator_and_tester",
        "documentation": {}
    },
    {
        "label": "BaseEvaluationTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "description": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "peekOfCode": "class BaseEvaluationTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Initialize test environment and configurations\"\"\"\n        cls.app_bootstrap = AppBootstrap()\n        cls.domain = \"localhost:8000\"\n        cls.start_url = \"http://localhost:8000/\"\n        cls.difficulty_level = TaskDifficultyLevel.EASY\n        cls.output_dir = Path(__file__).resolve().parent\n        cls.output_dir.mkdir(parents=True, exist_ok=True)",
        "detail": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "documentation": {}
    },
    {
        "label": "GroupedEvaluationTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "description": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "peekOfCode": "class GroupedEvaluationTest(BaseEvaluationTest):\n    def test_evaluation_with_grouping(self):\n        \"\"\"Test task evaluation with grouping enabled\"\"\"\n        elapsed_time = asyncio.run(\n            self.evaluate_tasks(\n                num_tasks=self.num_of_tasks_to_evaluate,\n                enable_grouping_tasks=True,\n            )\n        )\n        logging.info(f\"Grouped evaluation completed in {elapsed_time:.2f} seconds\")",
        "detail": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "documentation": {}
    },
    {
        "label": "NonGroupedEvaluationTest",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "description": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "peekOfCode": "class NonGroupedEvaluationTest(BaseEvaluationTest):\n    def test_evaluation_without_grouping(self):\n        \"\"\"Test task evaluation with grouping disabled\"\"\"\n        elapsed_time = asyncio.run(\n            self.evaluate_tasks(\n                num_tasks=self.num_of_tasks_to_evaluate,\n                enable_grouping_tasks=False,\n            )\n        )\n        logging.info(f\"Non-grouped evaluation completed in {elapsed_time:.2f} seconds\")",
        "detail": "autoppia_iwa_module.tests.evaluation.stress_tests",
        "documentation": {}
    },
    {
        "label": "TestActionExecution",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.evaluation.test_evaluator_actions",
        "description": "autoppia_iwa_module.tests.evaluation.test_evaluator_actions",
        "peekOfCode": "class TestActionExecution(unittest.TestCase):\n    \"\"\"\n    Unit test for evaluating task execution and action processing.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        Class-level setup that initializes the application bootstrap and task/action data.\n        \"\"\"\n        cls.app_bootstrap = AppBootstrap()",
        "detail": "autoppia_iwa_module.tests.evaluation.test_evaluator_actions",
        "documentation": {}
    },
    {
        "label": "UIParserService",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.llms.ui_parser",
        "description": "autoppia_iwa_module.tests.llms.ui_parser",
        "peekOfCode": "class UIParserService:\n    def __init__(self):\n        device = 0 if torch.cuda.is_available() else -1\n        self.ui_parser = pipeline(\n            \"image-to-text\",\n            model=\"microsoft/OmniParser-v2.0\",\n            device=device\n        )\n    def summarize_image(self, image: Image.Image) -> str:\n        try:",
        "detail": "autoppia_iwa_module.tests.llms.ui_parser",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithCache",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "description": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "peekOfCode": "class TestWebAnalysisPipelineWithCache(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"Set up resources for all tests.\"\"\"\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.enable_crawl = False\n        cls.data = {\n            \"domain\": \"localhost:8000\",",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analysis_with_cache",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipelineWithNoCrawling",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "description": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "peekOfCode": "class TestWebAnalysisPipelineWithNoCrawling(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.url = \"http://localhost:8000/\"\n        cls.enable_crawl = False\n        cls.get_analysis_from_cache = False\n        cls.save_results_in_db = True",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_analyzer_without_crawl",
        "documentation": {}
    },
    {
        "label": "TestWebAnalysisPipeline",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "description": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "peekOfCode": "class TestWebAnalysisPipeline(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.app_boostrap = AppBootstrap()\n        cls.analysis_repository = cls.app_boostrap.container.analysis_repository()\n        cls.llm_service = cls.app_boostrap.container.llm_service()\n        cls.start_url = \"http://localhost:8000/\"\n    def test_pipeline(self):\n        \"\"\"\n        Test the pipeline with a real website to verify the complete flow.",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_analyzer.test_web_complete_analyzer",
        "documentation": {}
    },
    {
        "label": "crawler_config",
        "kind": 5,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawler_config = WebCrawlerConfig(start_url=\"https://ajedrezenmadrid.com\", max_depth=2)\nweb_crawler = WebCrawler(crawler_config)\ncrawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "web_crawler",
        "kind": 5,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "web_crawler = WebCrawler(crawler_config)\ncrawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:\n        print(link)",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "crawled_urls",
        "kind": 5,
        "importPath": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "description": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "peekOfCode": "crawled_urls = web_crawler.crawl_urls()\nprint(\"Crawled URLs:\")\nfor url in crawled_urls:\n    print(url)\nasync def run_async_playwright():\n    all_links = await web_crawler.get_links(\"https://ajedrezenmadrid.com\")\n    print(\"Links obtained using async Playwright:\")\n    for link in all_links:\n        print(link)\nif __name__ == \"__main__\":",
        "detail": "autoppia_iwa_module.tests.web_analysis.web_crawler.test_web_crawler",
        "documentation": {}
    },
    {
        "label": "TestDIContainer",
        "kind": 6,
        "importPath": "autoppia_iwa_module.tests.test_di_container",
        "description": "autoppia_iwa_module.tests.test_di_container",
        "peekOfCode": "class TestDIContainer(containers.DeclarativeContainer):\n    \"\"\"Dependency Injection Container.\"\"\"\n    # Configuration\n    config = providers.Configuration()\n    wiring_config = containers.WiringConfiguration(packages=[\"tests\"])\n    web_agent = providers.Singleton(lambda: TestDIContainer._assign_agent())\n    @staticmethod\n    def _assign_agent() -> ApifiedWebAgent:\n        return ApifiedWebAgent(name=AGENT_NAME, host=AGENT_HOST, port=AGENT_PORT)",
        "detail": "autoppia_iwa_module.tests.test_di_container",
        "documentation": {}
    },
    {
        "label": "normalize_max_weight",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "peekOfCode": "def normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:\n        y (:obj:`np.ndarray`):\n            Normalized x array.",
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "convert_weights_and_uids_for_emit",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "peekOfCode": "def convert_weights_and_uids_for_emit(\n    uids: np.ndarray, weights: np.ndarray\n) -> Tuple[List[int], List[int]]:\n    r\"\"\"Converts weights into integer u32 representation that sum to MAX_INT_WEIGHT.\n    Args:\n        uids (:obj:`np.ndarray,`):\n            Array of uids as destinations for passed weights.\n        weights (:obj:`np.ndarray,`):\n            Array of weights.\n    Returns:",
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "process_weights_for_netuid",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "peekOfCode": "def process_weights_for_netuid(\n    uids,\n    weights: np.ndarray,\n    netuid: int,\n    subtensor: \"bittensor.subtensor\",\n    metagraph: \"bittensor.metagraph\" = None,\n    exclude_quantile: int = 0,\n) -> Union[\n    tuple[\n        ndarray[Any, dtype[Any]],",
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "U32_MAX",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "peekOfCode": "U32_MAX = 4294967295\nU16_MAX = 65535\ndef normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:",
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "U16_MAX",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "description": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "peekOfCode": "U16_MAX = 65535\ndef normalize_max_weight(x: np.ndarray, limit: float = 0.1) -> np.ndarray:\n    r\"\"\"Normalizes the numpy array x so that sum(x) = 1 and the max value is not greater than the limit.\n    Args:\n        x (:obj:`np.ndarray`):\n            Array to be max_value normalized.\n        limit: float:\n            Max value after normalization.\n    Returns:\n        y (:obj:`np.ndarray`):",
        "detail": "autoppia_web_agents_subnet.base.utils.weight_utils",
        "documentation": {}
    },
    {
        "label": "BaseMinerNeuron",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.base.miner",
        "description": "autoppia_web_agents_subnet.base.miner",
        "peekOfCode": "class BaseMinerNeuron(BaseNeuron):\n    \"\"\"\n    Base class for Bittensor miners.\n    \"\"\"\n    neuron_type: str = \"MinerNeuron\"\n    def __init__(self, config=None):\n        super().__init__(config=config)\n        # Warn if allowing incoming requests from anyone.\n        if not self.config.blacklist.force_validator_permit:\n            bt.logging.warning(",
        "detail": "autoppia_web_agents_subnet.base.miner",
        "documentation": {}
    },
    {
        "label": "BaseNeuron",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.base.neuron",
        "description": "autoppia_web_agents_subnet.base.neuron",
        "peekOfCode": "class BaseNeuron(ABC):\n    \"\"\"\n    Base class for Bittensor miners. This class is abstract and should be inherited by a subclass. It contains the core logic for all neurons; validators and miners.\n    In addition to creating a wallet, subtensor, and metagraph, this class also handles the synchronization of the network state via a basic checkpointing mechanism based on epoch length.\n    \"\"\"\n    neuron_type: str = \"BaseNeuron\"\n    @classmethod\n    def check_config(cls, config: \"bt.Config\"):\n        check_config(cls, config)\n    @classmethod",
        "detail": "autoppia_web_agents_subnet.base.neuron",
        "documentation": {}
    },
    {
        "label": "BaseValidatorNeuron",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.base.validator",
        "description": "autoppia_web_agents_subnet.base.validator",
        "peekOfCode": "class BaseValidatorNeuron(BaseNeuron):\n    \"\"\"\n    Base class for Bittensor validators. Your validator should inherit from this class.\n    \"\"\"\n    neuron_type: str = \"ValidatorNeuron\"\n    @classmethod\n    def add_args(cls, parser: argparse.ArgumentParser):\n        super().add_args(parser)\n        add_validator_args(cls, parser)\n    def __init__(self, config=None):",
        "detail": "autoppia_web_agents_subnet.base.validator",
        "documentation": {}
    },
    {
        "label": "is_cuda_available",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def is_cuda_available():\n    try:\n        output = subprocess.check_output(\n            [\"nvidia-smi\", \"-L\"], stderr=subprocess.STDOUT\n        )\n        if \"NVIDIA\" in output.decode(\"utf-8\"):\n            return \"cuda\"\n    except Exception:\n        pass\n    try:",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "check_config",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def check_config(cls, config: \"bt.Config\"):\n    r\"\"\"Checks/validates the config namespace object.\"\"\"\n    bt.logging.check_config(config)\n    full_path = os.path.expanduser(\n        \"{}/{}/{}/netuid{}/{}\".format(\n            config.logging.logging_dir,  # TODO: change from ~/.bittensor/miners to ~/.bittensor/neurons\n            config.wallet.name,\n            config.wallet.hotkey,\n            config.netuid,\n            config.neuron.name,",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "add_args",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def add_args(cls, parser):\n    \"\"\"\n    Adds relevant arguments to the parser for operation.\n    \"\"\"\n    parser.add_argument(\"--netuid\", type=int, help=\"Subnet netuid\", default=1)\n    parser.add_argument(\n        \"--neuron.device\",\n        type=str,\n        help=\"Device to run on.\",\n        default=is_cuda_available(),",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "add_miner_args",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def add_miner_args(cls, parser):\n    \"\"\"Add miner specific arguments to the parser.\"\"\"\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,\n        help=\"Trials for this neuron go in neuron.root / (wallet_cold - wallet_hot) / neuron.name. \",\n        default=\"miner\",\n    )\n    parser.add_argument(\n        \"--blacklist.force_validator_permit\",",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "add_validator_args",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def add_validator_args(cls, parser):\n    \"\"\"Add validator specific arguments to the parser.\"\"\"\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,\n        help=\"Trials for this neuron go in neuron.root / (wallet_cold - wallet_hot) / neuron.name. \",\n        default=\"validator\",\n    )\n    parser.add_argument(\n        \"--neuron.timeout\",",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.config",
        "description": "autoppia_web_agents_subnet.utils.config",
        "peekOfCode": "def config(cls):\n    \"\"\"\n    Returns the configuration object specific to this miner or validator after adding relevant arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    bt.wallet.add_args(parser)\n    bt.subtensor.add_args(parser)\n    bt.logging.add_args(parser)\n    bt.axon.add_args(parser)\n    cls.add_args(parser)",
        "detail": "autoppia_web_agents_subnet.utils.config",
        "documentation": {}
    },
    {
        "label": "ColoredLogger",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "peekOfCode": "class ColoredLogger:\n    \"\"\"A simple logger that uses ANSI colors when calling bt.logging methods.\"\"\"\n    BLUE = \"blue\"\n    YELLOW = \"yellow\"\n    RED = \"red\"\n    GREEN = \"green\"\n    RESET = \"reset\"\n    _COLORS = {\n        \"blue\": \"\\033[94m\",\n        \"yellow\": \"\\033[93m\",",
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "setup_events_logger",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "peekOfCode": "def setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event\n    formatter = logging.Formatter(\n        \"%(asctime)s | %(levelname)s | %(message)s\",",
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "EVENTS_LEVEL_NUM",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "peekOfCode": "EVENTS_LEVEL_NUM = 38\nDEFAULT_LOG_BACKUP_COUNT = 10\ndef setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event",
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_BACKUP_COUNT",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.utils.logging",
        "description": "autoppia_web_agents_subnet.utils.logging",
        "peekOfCode": "DEFAULT_LOG_BACKUP_COUNT = 10\ndef setup_events_logger(full_path, events_retention_size):\n    logging.addLevelName(EVENTS_LEVEL_NUM, \"EVENT\")\n    logger = logging.getLogger(\"event\")\n    logger.setLevel(EVENTS_LEVEL_NUM)\n    def event(self, message, *args, **kws):\n        if self.isEnabledFor(EVENTS_LEVEL_NUM):\n            self._log(EVENTS_LEVEL_NUM, message, args, **kws)\n    logging.Logger.event = event\n    formatter = logging.Formatter(",
        "detail": "autoppia_web_agents_subnet.utils.logging",
        "documentation": {}
    },
    {
        "label": "ttl_cache",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.misc",
        "description": "autoppia_web_agents_subnet.utils.misc",
        "peekOfCode": "def ttl_cache(maxsize: int = 128, typed: bool = False, ttl: int = -1):\n    \"\"\"\n    Decorator that creates a cache of the most recently used function calls with a time-to-live (TTL) feature.\n    The cache evicts the least recently used entries if the cache exceeds the `maxsize` or if an entry has\n    been in the cache longer than the `ttl` period.\n    Args:\n        maxsize (int): Maximum size of the cache. Once the cache grows to this size, subsequent entries\n                       replace the least recently used ones. Defaults to 128.\n        typed (bool): If set to True, arguments of different types will be cached separately. For example,\n                      f(3) and f(3.0) will be treated as distinct calls with distinct results. Defaults to False.",
        "detail": "autoppia_web_agents_subnet.utils.misc",
        "documentation": {}
    },
    {
        "label": "ttl_get_block",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.misc",
        "description": "autoppia_web_agents_subnet.utils.misc",
        "peekOfCode": "def ttl_get_block(self) -> int:\n    \"\"\"\n    Retrieves the current block number from the blockchain. This method is cached with a time-to-live (TTL)\n    of 12 seconds, meaning that it will only refresh the block number from the blockchain at most every 12 seconds,\n    reducing the number of calls to the underlying blockchain interface.\n    Returns:\n        int: The current block number on the blockchain.\n    This method is useful for applications that need to access the current block number frequently and can\n    tolerate a delay of up to 12 seconds for the latest information. By using a cache with TTL, the method\n    efficiently reduces the workload on the blockchain interface.",
        "detail": "autoppia_web_agents_subnet.utils.misc",
        "documentation": {}
    },
    {
        "label": "check_uid_availability",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.uids",
        "description": "autoppia_web_agents_subnet.utils.uids",
        "peekOfCode": "def check_uid_availability(\n    metagraph: \"bt.metagraph.Metagraph\", uid: int, vpermit_tao_limit: int\n) -> bool:\n    \"\"\"Check if uid is available. The UID should be available if it is serving and has less than vpermit_tao_limit stake\n    Args:\n        metagraph (:obj: bt.metagraph.Metagraph): Metagraph object\n        uid (int): uid to be checked\n        vpermit_tao_limit (int): Validator permit tao limit\n    Returns:\n        bool: True if uid is available, False otherwise",
        "detail": "autoppia_web_agents_subnet.utils.uids",
        "documentation": {}
    },
    {
        "label": "get_random_uids",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.utils.uids",
        "description": "autoppia_web_agents_subnet.utils.uids",
        "peekOfCode": "def get_random_uids(self, k: int, exclude: List[int] = None) -> np.ndarray:\n    \"\"\"Returns k available random uids from the metagraph.\n    Args:\n        k (int): Number of uids to return.\n        exclude (List[int]): List of uids to exclude from the random sampling.\n    Returns:\n        uids (np.ndarray): Randomly sampled available uids.\n    Notes:\n        If `k` is larger than the number of available `uids`, set `k` to the number of available `uids`.\n    \"\"\"",
        "detail": "autoppia_web_agents_subnet.utils.uids",
        "documentation": {}
    },
    {
        "label": "read_config",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.config",
        "description": "autoppia_web_agents_subnet.validator.config",
        "peekOfCode": "def read_config() -> bt.config:\n    parser = argparse.ArgumentParser()\n    bt.logging.add_args(parser)\n    bt.wallet.add_args(parser)\n    bt.subtensor.add_args(parser)\n    bt.axon.add_args(parser)\n    parser.add_argument(\"--netuid\", type=int, help=\"Subnet netuid\", default=36)\n    parser.add_argument(\n        \"--neuron.name\",\n        type=str,",
        "detail": "autoppia_web_agents_subnet.validator.config",
        "documentation": {}
    },
    {
        "label": "init_miner_stats",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "def init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):\n        validator.miner_stats = {}\n    if \"aggregated\" not in validator.miner_stats:\n        validator.miner_stats[\"aggregated\"] = MinerStats()\nasync def retrieve_random_demo_web_project() -> WebProject:\n    \"\"\"",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "collect_task_solutions",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "def collect_task_solutions(\n    task: Task,\n    responses: List[TaskSynapse],\n    miner_uids: List[int],\n) -> (List[TaskSolution], List[float]):\n    \"\"\"\n    Collects TaskSolutions from the miners' responses and keeps track of their execution times.\n    \"\"\"\n    task_solutions = []\n    execution_times = []",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "get_task_solution_from_synapse",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "def get_task_solution_from_synapse(\n    task_id, synapse: TaskSynapse, web_agent_id: str\n) -> TaskSolution:\n    \"\"\"\n    Safely extracts actions from a TaskSynapse response and creates a TaskSolution \n    with the original task reference, limiting actions to a maximum of 15.\n    \"\"\"\n    actions = []\n    if synapse and hasattr(synapse, \"actions\") and isinstance(synapse.actions, list):\n        actions = synapse.actions[:MAX_ACTIONS_LENGTH]  # Limit actions to at most 15",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "clean_miner_task",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "def clean_miner_task(task: Task) -> Task:\n    \"\"\"\n    Creates a shallow copy of the Task removing fields not needed by miners,\n    and ensures the `html` attribute is never None.\n    \"\"\"\n    task_copy = deepcopy(task)\n    task_copy.tests = None\n    task_copy.milestones = None\n    # Ensure `html` is never None\n    if hasattr(task_copy, \"html\") and task_copy.html is None:",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "TIMEOUT",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "TIMEOUT = 60 * 2  # 2 Min\nFORWARD_SLEEP_SECONDS = 60 * 1  # 1 Minutes\nTASK_SLEEP = 60 * 1  # 1 Minute\nTIME_WEIGHT = 0.2\nMIN_SCORE_FOR_CORRECT_FORMAT = 0.1  # 10%\nMIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "FORWARD_SLEEP_SECONDS",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "FORWARD_SLEEP_SECONDS = 60 * 1  # 1 Minutes\nTASK_SLEEP = 60 * 1  # 1 Minute\nTIME_WEIGHT = 0.2\nMIN_SCORE_FOR_CORRECT_FORMAT = 0.1  # 10%\nMIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "TASK_SLEEP",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "TASK_SLEEP = 60 * 1  # 1 Minute\nTIME_WEIGHT = 0.2\nMIN_SCORE_FOR_CORRECT_FORMAT = 0.1  # 10%\nMIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "TIME_WEIGHT",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "TIME_WEIGHT = 0.2\nMIN_SCORE_FOR_CORRECT_FORMAT = 0.1  # 10%\nMIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "MIN_SCORE_FOR_CORRECT_FORMAT",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "MIN_SCORE_FOR_CORRECT_FORMAT = 0.1  # 10%\nMIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "MIN_RESPONSE_REWARD",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "MIN_RESPONSE_REWARD = 0\nSAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):\n        validator.miner_stats = {}",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "SAMPLE_SIZE",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "SAMPLE_SIZE = 256  # Number of Miners\nMAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):\n        validator.miner_stats = {}\n    if \"aggregated\" not in validator.miner_stats:",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "MAX_ACTIONS_LENGTH",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "MAX_ACTIONS_LENGTH = 15\nNUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):\n        validator.miner_stats = {}\n    if \"aggregated\" not in validator.miner_stats:\n        validator.miner_stats[\"aggregated\"] = MinerStats()",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "NUM_URLS",
        "kind": 5,
        "importPath": "autoppia_web_agents_subnet.validator.forward",
        "description": "autoppia_web_agents_subnet.validator.forward",
        "peekOfCode": "NUM_URLS = 1\ndef init_miner_stats(validator) -> None:\n    \"\"\"\n    Ensure `validator.miner_stats` is initialized.\n    \"\"\"\n    if not hasattr(validator, \"miner_stats\"):\n        validator.miner_stats = {}\n    if \"aggregated\" not in validator.miner_stats:\n        validator.miner_stats[\"aggregated\"] = MinerStats()\nasync def retrieve_random_demo_web_project() -> WebProject:",
        "detail": "autoppia_web_agents_subnet.validator.forward",
        "documentation": {}
    },
    {
        "label": "normalize_execution_times",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.reward",
        "description": "autoppia_web_agents_subnet.validator.reward",
        "peekOfCode": "def normalize_execution_times(times: List[Optional[float]]) -> List[float]:\n    if not times:\n        return []\n    valid_times = [t for t in times if t is not None]\n    if not valid_times:\n        return [0.0] * len(times)\n    min_time = min(valid_times)\n    max_time = max(valid_times)\n    if max_time == min_time:\n        return [1.0 if t is not None else 0.0 for t in times]",
        "detail": "autoppia_web_agents_subnet.validator.reward",
        "documentation": {}
    },
    {
        "label": "get_score_from_evaluation_result",
        "kind": 2,
        "importPath": "autoppia_web_agents_subnet.validator.reward",
        "description": "autoppia_web_agents_subnet.validator.reward",
        "peekOfCode": "def get_score_from_evaluation_result(result: EvaluationResult) -> float:\n    if result.final_score is None:\n        return 0.0\n    return result.final_score",
        "detail": "autoppia_web_agents_subnet.validator.reward",
        "documentation": {}
    },
    {
        "label": "MinerStats",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "peekOfCode": "class MinerStats(BaseModel):\n    avg_score: float = 0.0\n    avg_execution_time: float = 0.0\n    avg_evaluation_time: float = 0.0\n    total_tasks: int = 0\n    total_successful_tasks: int = 0\n    last_task: Optional[\"Task\"] = None\n    sum_score: float = 0.0\n    sum_execution_time: float = 0.0\n    sum_evaluation_time: float = 0.0",
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskSynapse",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "peekOfCode": "class TaskSynapse(Synapse):\n    version: str = \"\"\n    prompt: str\n    url: str\n    html: Optional[str] = None\n    screenshot: Optional[str] = None\n    actions: List[AllActionsUnion] = Field(\n        default_factory=list,\n        description=\"The actions that solve the task\"\n    )",
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "TaskFeedbackSynapse",
        "kind": 6,
        "importPath": "autoppia_web_agents_subnet.protocol",
        "description": "autoppia_web_agents_subnet.protocol",
        "peekOfCode": "class TaskFeedbackSynapse(Synapse):\n    version: str = \"\"\n    stats: MinerStats\n    class Config:\n        extra = \"allow\"\n        arbitrary_types_allowed = True\n    def deserialize(self) -> \"TaskFeedbackSynapse\":\n        return self\n    def print_in_terminal(self):\n        validator_hotkey = getattr(self.dendrite, \"hotkey\", None)  ",
        "detail": "autoppia_web_agents_subnet.protocol",
        "documentation": {}
    },
    {
        "label": "Miner",
        "kind": 6,
        "importPath": "neurons.miner",
        "description": "neurons.miner",
        "peekOfCode": "class Miner(BaseMinerNeuron):\n    \"\"\"\n    Your miner neuron class. You should use this class to define your miner's behavior. In particular, you should replace the forward function with your own logic. You may also want to override the blacklist and priority functions according to your needs.\n    This class inherits from the BaseMinerNeuron class, which in turn inherits from BaseNeuron. The BaseNeuron class takes care of routine tasks such as setting up wallet, subtensor, metagraph, logging directory, parsing config, etc. You can override any of the methods in BaseNeuron if you need to customize the behavior.\n    This class provides reasonable default behavior for a miner such as blacklisting unrecognized hotkeys, prioritizing requests based on stake, and forwarding requests to the forward function. If you need to define custom\n    \"\"\"\n    def __init__(self, config=None):\n        super(Miner, self).__init__(config=config)\n        self.agent = (\n            ApifiedWebAgent(name=AGENT_NAME, host=AGENT_HOST, port=AGENT_PORT)",
        "detail": "neurons.miner",
        "documentation": {}
    },
    {
        "label": "Validator",
        "kind": 6,
        "importPath": "neurons.validator",
        "description": "neurons.validator",
        "peekOfCode": "class Validator(BaseValidatorNeuron):\n    \"\"\"\n    Your validator neuron class. You should use this class to define your validator's behavior. In particular, you should replace the forward function with your own logic.\n    This class inherits from the BaseValidatorNeuron class, which in turn inherits from BaseNeuron. The BaseNeuron class takes care of routine tasks such as setting up wallet, subtensor, metagraph, logging directory, parsing config, etc. You can override any of the methods in BaseNeuron if you need to customize the behavior.\n    This class provides reasonable default behavior for a validator such as keeping a moving average of the scores of the miners and using them to set weights at the end of each epoch. Additionally, the scores are reset for new hotkeys at the end of each epoch.\n    \"\"\"\n    def __init__(self, config=None):\n        super(Validator, self).__init__(config=config)\n        bt.logging.info(\"load_state()\")\n        self.load_state()",
        "detail": "neurons.validator",
        "documentation": {}
    },
    {
        "label": "read_requirements",
        "kind": 2,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "def read_requirements(file_path):\n    with open(file_path, \"r\") as f:\n        requirements = f.read().splitlines()\n        processed = []\n        for req in requirements:\n            if req.startswith(\"git+\") or \"@\" in req:\n                pkg_name = re.search(r\"(#egg=)([\\w\\-_]+)\", req)\n                if pkg_name:\n                    processed.append(pkg_name.group(2))\n                else:",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "requirements",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "requirements = read_requirements(\"requirements.txt\")\nhere = path.abspath(path.dirname(__file__))\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n# TODO: If your version is stored elsewhere, update the path below or set manually.\nwith codecs.open(os.path.join(here, \"autoppia_web_agents_subnet/__init__.py\"), encoding=\"utf-8\") as init_file:\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", init_file.read(), re.M)\n    version_string = version_match.group(1)\nsetup(\n    name=\"autoppia_web_agents_subnet\",",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "here = path.abspath(path.dirname(__file__))\nwith open(path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n# TODO: If your version is stored elsewhere, update the path below or set manually.\nwith codecs.open(os.path.join(here, \"autoppia_web_agents_subnet/__init__.py\"), encoding=\"utf-8\") as init_file:\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", init_file.read(), re.M)\n    version_string = version_match.group(1)\nsetup(\n    name=\"autoppia_web_agents_subnet\",\n    version=version_string,",
        "detail": "setup",
        "documentation": {}
    }
]